"use strict";(self.webpackChunkcodingdocs=self.webpackChunkcodingdocs||[]).push([[2825],{3905:(n,e,a)=>{a.d(e,{Zo:()=>d,kt:()=>h});var i=a(67294);function t(n,e,a){return e in n?Object.defineProperty(n,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[e]=a,n}function r(n,e){var a=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),a.push.apply(a,i)}return a}function l(n){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?r(Object(a),!0).forEach((function(e){t(n,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(a,e))}))}return n}function p(n,e){if(null==n)return{};var a,i,t=function(n,e){if(null==n)return{};var a,i,t={},r=Object.keys(n);for(i=0;i<r.length;i++)a=r[i],e.indexOf(a)>=0||(t[a]=n[a]);return t}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(i=0;i<r.length;i++)a=r[i],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(n,a)&&(t[a]=n[a])}return t}var u=i.createContext({}),c=function(n){var e=i.useContext(u),a=e;return n&&(a="function"==typeof n?n(e):l(l({},e),n)),a},d=function(n){var e=c(n.components);return i.createElement(u.Provider,{value:e},n.children)},s="mdxType",m={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},o=i.forwardRef((function(n,e){var a=n.components,t=n.mdxType,r=n.originalType,u=n.parentName,d=p(n,["components","mdxType","originalType","parentName"]),s=c(a),o=t,h=s["".concat(u,".").concat(o)]||s[o]||m[o]||r;return a?i.createElement(h,l(l({ref:e},d),{},{components:a})):i.createElement(h,l({ref:e},d))}));function h(n,e){var a=arguments,t=e&&e.mdxType;if("string"==typeof n||t){var r=a.length,l=new Array(r);l[0]=o;var p={};for(var u in e)hasOwnProperty.call(e,u)&&(p[u]=e[u]);p.originalType=n,p[s]="string"==typeof n?n:t,l[1]=p;for(var c=2;c<r;c++)l[c]=a[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,a)}o.displayName="MDXCreateElement"},22315:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>d,contentTitle:()=>u,default:()=>k,frontMatter:()=>p,metadata:()=>c,toc:()=>s});a(67294);var i=a(3905);function t(n,e,a){return e in n?Object.defineProperty(n,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[e]=a,n}function r(n,e){return e=null!=e?e:{},Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):function(n,e){var a=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),a.push.apply(a,i)}return a}(Object(e)).forEach((function(a){Object.defineProperty(n,a,Object.getOwnPropertyDescriptor(e,a))})),n}function l(n,e){if(null==n)return{};var a,i,t=function(n,e){if(null==n)return{};var a,i,t={},r=Object.keys(n);for(i=0;i<r.length;i++)a=r[i],e.indexOf(a)>=0||(t[a]=n[a]);return t}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(i=0;i<r.length;i++)a=r[i],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(n,a)&&(t[a]=n[a])}return t}const p={hide_title:!0,sidebar_position:6,sidebar_label:"Vorlesung",tags:["linguae","cpp","c++","cplusplus","aufgaben"]},u=void 0,c={unversionedId:"Aufgaben/vorlesung",id:"Aufgaben/vorlesung",title:"vorlesung",description:"## 13.10",source:"@site/docs/cpp/Aufgaben/vorlesung.mdx",sourceDirName:"Aufgaben",slug:"/Aufgaben/vorlesung",permalink:"/cpp/Aufgaben/vorlesung",draft:!1,editUrl:"https://p76ers.github.io/docs/cpp/Aufgaben/vorlesung.mdx",tags:[{label:"linguae",permalink:"/cpp/tags/linguae"},{label:"cpp",permalink:"/cpp/tags/cpp"},{label:"c++",permalink:"/cpp/tags/c"},{label:"cplusplus",permalink:"/cpp/tags/cplusplus"},{label:"aufgaben",permalink:"/cpp/tags/aufgaben"}],version:"current",lastUpdatedAt:1699628022,formattedLastUpdatedAt:"Nov 10, 2023",sidebarPosition:6,frontMatter:{hide_title:!0,sidebar_position:6,sidebar_label:"Vorlesung",tags:["linguae","cpp","c++","cplusplus","aufgaben"]},sidebar:"tutorialSidebar",previous:{title:"13.4",permalink:"/cpp/Aufgaben/13.4"}},d={},s=[{value:"13.10",id:"1310",level:2},{value:"while.cpp",id:"whilecpp",level:3},{value:"for.cpp",id:"forcpp",level:3},{value:"16.10",id:"1610",level:2},{value:"EVA-Prinzip",id:"eva-prinzip",level:3},{value:"teilenMitModulo.cpp",id:"teilenmitmodulocpp",level:3},{value:"teilenOhneModulo.cpp",id:"teilenohnemodulocpp",level:3},{value:"17.10",id:"1710",level:2},{value:"zufallZahlen",id:"zufallzahlen",level:3},{value:"MinMax.cpp",id:"minmaxcpp",level:3},{value:"18.10",id:"1810",level:2},{value:"minMax2.cpp",id:"minmax2cpp",level:3},{value:"minMaxZufallZahlen.cpp",id:"minmaxzufallzahlencpp",level:3},{value:"19.10",id:"1910",level:2},{value:"minMaxZufallZahlen2.cpp",id:"minmaxzufallzahlen2cpp",level:3},{value:"20.10",id:"2010",level:2},{value:"array01.cpp",id:"array01cpp",level:3},{value:"array02.cpp",id:"array02cpp",level:3},{value:"array02GeradeUngeradeAnzahl.cpp",id:"array02geradeungeradeanzahlcpp",level:3},{value:"array02MinMax.cpp",id:"array02minmaxcpp",level:3},{value:"06.11",id:"0611",level:2},{value:"quadratzahlen.cpp",id:"quadratzahlencpp",level:3},{value:"zerlegen.cpp",id:"zerlegencpp",level:4},{value:"zerlegen2.cpp",id:"zerlegen2cpp",level:3},{value:"zerlegenP.cpp",id:"zerlegenpcpp",level:3},{value:"rechenTrainer1.cpp",id:"rechentrainer1cpp",level:3},{value:"rechenTrainer2.cpp",id:"rechentrainer2cpp",level:3},{value:"rechenTrainer3.cpp",id:"rechentrainer3cpp",level:3},{value:"rechenTrainerP.cpp",id:"rechentrainerpcpp",level:3},{value:"07.11",id:"0711",level:2},{value:"arr01.cpp",id:"arr01cpp",level:3},{value:"arr02strings.cpp",id:"arr02stringscpp",level:3},{value:"08.11",id:"0811",level:2},{value:"arrWuerfeln.cpp",id:"arrwuerfelncpp",level:3},{value:"volumen.cpp",id:"volumencpp",level:3},{value:"arrayGeradeUebertragen",id:"arraygeradeuebertragen",level:3},{value:"09.11",id:"0911",level:2},{value:"minimumSort",id:"minimumsort",level:3},{value:"minimumSortZufall.cpp",id:"minimumsortzufallcpp",level:3},{value:"bubbleSort.cpp",id:"bubblesortcpp",level:3},{value:"arraySearch.cpp",id:"arraysearchcpp",level:3},{value:"arrayGewinner.cpp",id:"arraygewinnercpp",level:3},{value:"10.11",id:"1011",level:2},{value:"\xdcbungsklausur 6",id:"\xfcbungsklausur-6",level:3},{value:"\xdcbungsklausur 7",id:"\xfcbungsklausur-7",level:3}],m=n=>function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)},o=m("CardHeading"),h=m("CardChapter"),g={toc:s},f="wrapper";function k(n){var{components:e}=n,p=l(n,["components"]);return(0,i.kt)(f,r(function(n){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{},i=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(a).filter((function(n){return Object.getOwnPropertyDescriptor(a,n).enumerable})))),i.forEach((function(e){t(n,e,a[e])}))}return n}({},g,p),{components:e,mdxType:"MDXLayout"}),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"1310"},"13.10")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"whilecpp"},"while.cpp"),(0,i.kt)("p",null,"  Geben Sie die Zahlen von 1-10 in der Konsole aus."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='while.cpp'",title:"'while.cpp'"},'#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n  int z = 0;\n\n  while (z <= 10)\n  {\n    cout << z << "\\n";\n    z++;\n  }\n\n  return 0;\n}\n')),(0,i.kt)("p",null,"alternativ:"),(0,i.kt)("h3",{id:"forcpp"},"for.cpp"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='for.cpp'",title:"'for.cpp'"},'#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n\n  for (int z = 0; z <= 10; z++)\n  {\n    cout << z << "\\n";\n  }\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"1610"},"16.10")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"eva-prinzip"},"EVA-Prinzip"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='eva.cpp'",title:"'eva.cpp'"},'#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n  int a = 0;\n  int b = 0;\n\n  // Eingabe\n  //\n  cout << "Eingabe von a: \\n";\n  cin >> a;\n  cout << "Eingabe von b: \\n";\n  cin >> b;\n\n  // Verarbeitung\n\n  // modulo funktioniert nur bei integer\n  a %= b;\n\n  // int werden abgeschnitten\n  // a /= b;\n\n  // Ausgabe\n  cout << a;\n\n  /*\n  Eingabe 3 und 8     -   299 und 100\n  Ergebnis 0 Rest 3   -   2 Test 99\n  */\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"teilenmitmodulocpp"},"teilenMitModulo.cpp"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='teilenMitModulo.cpp'",title:"'teilenMitModulo.cpp'"},'#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n// Deklarationen und Initialisierungen\nint a = 0, b = 0, c = 0;\n\n// Eingabe(n)\ncout << "Eingabe a bitte: ";\ncin >> a; // "Console Input"\ncout << "Eingabe b bitte: ";\ncin >> b; // "Console Input"\n\n// Verarbeitung\nc = a / b;\na %= b; // a = a / b\n\n// Ausgabe(n)\n//  Eingaben: 3 und 8  -  299 und 100\n//  Ausgabe:  0 Rest 3 -   2 Rest 99\n\ncout << c << " Rest " << a; // "Console Output"\nreturn 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"teilenohnemodulocpp"},"teilenOhneModulo.cpp"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='teilenOhneModulo.cpp'",title:"'teilenOhneModulo.cpp'"},'#include <iostream>\n\n/*\nTeilen ohne modulo...\n  b != 0\n  a > b\n    z.B.  Eingaben: 3 und 8  -  299 und 100\n    ->    Ausgabe:  0 Rest 3 -   2 Rest 99\n*/\n\nusing namespace std;\n\nint main()\n{\n  int a = 0, b = 0, c = 0;\n\n  cout << "Eingabe a bitte: ";\n  cin >> a;\n  cout << "Eingabe b bitte: ";\n  cin >> b;\n\n  while (a >= b)\n  {\n    a -= b;\n    c++;\n  }\n\n  cout << c << " Rest " << a;\n  return 0;\n}\n\n'))),(0,i.kt)("br",null),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"1710"},"17.10")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"zufallzahlen"},"zufallZahlen"),(0,i.kt)("p",null,"  Geben Sie 50 zuf\xe4llig ermittelte Zahlen in der Konsole aus."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='zufallZahlen.cpp'",title:"'zufallZahlen.cpp'"},'#include <iostream>\n#include <stdlib.h>\n#include <time.h>\n#define OG 6\n#define UG 1\n\nusing namespace std;\n\nint main()\n{\n  int i, zufall;\n  srand(time(NULL)); // Start Random\n\n  for (i = 1; i <= 50; i++)\n  {\n    //  zufall=rand()%(Obergrenze-Untergrenze+1)+Untergrenze\n    zufall = rand() % (OG - UG + 1) + UG;\n    cout << zufall << " ";\n    if (i % 10 == 0)\n    {\n      cout << endl;\n    }\n  }\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"minmaxcpp"},"MinMax.cpp"),(0,i.kt)("p",null,"  Bestimmen Sie Minimum und Maximum von Zahlen und geben Sie diese in der Konsole aus."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"alt",src:a(40774).Z,width:"1072",height:"399"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='MinMax.cpp'",title:"'MinMax.cpp'"},'#include <iostream>\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n\n  int i = 0, mini = 0, maxi = 0, zahl = 0;\n  float summe = 0.0, durch = 0.0;\n\n  cout << "Bitte erste Zahl eingeben:" << endl;\n  cin >> zahl;\n\n  mini = zahl;\n  maxi = zahl;\n  summe = zahl;\n\n  for (i = 1; i < 5; i++)\n  {\n    cout << "Bitte naechste Zahl eingeben:" << endl;\n    cin >> zahl;\n    summe += zahl;\n    if (zahl > maxi)\n    {\n      maxi = zahl;\n    }\n    else if (zahl < mini)\n    {\n      mini = zahl;\n    }\n  }\n  durch = summe / i;\n\n  cout << "Minimum:" << mini << endl;\n  cout << "Maximum:" << maxi << endl;\n  cout << "Durchschnitt" << durch << endl;\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"1810"},"18.10")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"minmax2cpp"},"minMax2.cpp"),(0,i.kt)("p",null,"  Bestimmen Sie Minimum und Maximum von Zahlen und geben Sie diese in der Konsole aus."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"alt",src:a(57420).Z,width:"512",height:"983"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='minMax2.cpp'",title:"'minMax2.cpp'"},'#include <iostream>\n#include <stdlib.h>\n#include <time.h>\n#define OG 20\n#define UG 1\n\nusing namespace std;\n\nint main()\n{\n\n  int i, mini = 0, maxi = 0, zahl = 0;\n  float summe = 0.0, durch = 0.0;\n\n  for (i = 1; i <= 5; i++)\n  {\n    cout << "Zahl bitte: ";\n    cin >> zahl;\n    summe = summe + zahl;\n    if (i == 1)\n    {\n      maxi = zahl;\n      mini = zahl;\n    }\n    else if (zahl > maxi)\n    {\n      maxi = zahl;\n    }\n    else if (zahl < mini)\n    {\n      mini = zahl;\n    }\n  }\n\n  durch = summe / i;\n\n  cout << "\\nMinimum: " << mini;\n  cout << "\\nMaximum: " << maxi;\n  cout << "\\nDurchschnitt: " << durch;\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"minmaxzufallzahlencpp"},"minMaxZufallZahlen.cpp"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='minMaxZufallZahlen.cpp'",title:"'minMaxZufallZahlen.cpp'"},'#include <iostream>\n#include <stdlib.h>\n#include <time.h>\n#define OG 200\n#define UG 100\n\nusing namespace std;\n\nint main()\n{\n\n  int i = 0, mini = 0, maxi = 0, zahl = 0;\n  float summe = 0.0, durch = 0.0;\n\n  srand(time(NULL)); // Start Random\n  zahl = rand() % (OG - UG + 1) + UG;\n\n  mini = zahl;\n  maxi = zahl;\n  summe = zahl;\n\n  for (i = 1; i < 10; i++)\n  {\n\n    zahl = rand() % (OG - UG + 1) + UG;\n\n    summe += zahl;\n    if (zahl > maxi)\n    {\n      maxi = zahl;\n    }\n    else if (zahl < mini)\n    {\n      mini = zahl;\n    }\n  }\n  durch = summe / i;\n\n  cout << "Minimum:" << mini << endl;\n  cout << "Maximum:" << maxi << endl;\n  cout << "Durchschnitt" << durch << endl;\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"1910"},"19.10")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"minmaxzufallzahlen2cpp"},"minMaxZufallZahlen2.cpp"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='minMaxZufallZahlen2.cpp'",title:"'minMaxZufallZahlen2.cpp'"},'#include <iostream>\n#include <stdlib.h>\n#include <time.h>\n\n#define OG 500\n#define UG 1\n#define ANZAHL 100\n\nusing namespace std;\n\nint main()\n{\n\n  int i, mini = 0, maxi = 0, zahl = 0;\n  float summe = 0.0, durch = 0.0;\n  srand(time(NULL));\n\n  for (i = 1; i <= ANZAHL; i++)\n  {\n    zahl = rand() % (OG - UG + 1) + UG;\n    printf("%3i ", zahl);\n\n    if (i % 10 == 0)\n    {\n      printf("\\n");\n    }\n    summe = summe + zahl;\n    if (i == 1)\n    {\n      maxi = zahl;\n      mini = zahl;\n    }\n    else if (zahl > maxi)\n    {\n      maxi = zahl;\n    }\n    else if (zahl < mini)\n    {\n      mini = zahl;\n    }\n  }\n\n  durch = summe / ANZAHL;\n\n  cout << "\\nMinimum: " << mini;\n  cout << "\\nMaximum: " << maxi;\n  cout << "\\nDurchschnitt: " << durch;\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"2010"},"20.10")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"array01cpp"},"array01.cpp"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='array01.cpp'",title:"'array01.cpp'"},'#include <iostream>\n#include <stdlib.h>\n#include <time.h>\n#include <cmath>\n#define ANZ 5\n\nusing namespace std;\n\nint main()\n{\nint z[ANZ], i;\nsrand(time(NULL));\n\nfor (i = 0; i < ANZ; i++)\n{\n  cout << "z[" << i << "] bitte: ";\n  cin >> z[i];\n}\ncout << "\\n---------------------\\n";\n/*\n    for(i=ANZ-1; i>=0; i--){\n        cout << "z["<< i <<"]: " << z[i] << endl;\n    }\n\n    cout << "Welches Element wollen Sie sehen? ";\n    cin >> i;\n*/\ni = rand() % ANZ;\ncout << "\\nz[" << i << "]: " << z[i];\n\nreturn 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"array02cpp"},"array02.cpp"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='array02.cpp'",title:"'array02.cpp'"},'#include <iostream>\n#include <stdlib.h>\n#include <time.h>\n#include <cmath>\n#define ANZ 50\n\nusing namespace std;\n\nint main()\n{\nint z[ANZ], i;\nsrand(time(NULL));\n\nfor (i = 0; i < ANZ; i++)\n{\n  z[i] = rand() % 100 + 1;\n}\n\nfor (i = 0; i < ANZ; i++)\n{\n  cout << z[i] << " ";\n  if ((i + 1) % 10 == 0)\n    cout << endl;\n}\ncout << "\\n---------------------\\n";\ncout << "Welches Element wollen Sie sehen? ";\ncin >> i;\n\n//   i=rand()%ANZ;\ncout << "\\nz[" << i << "]: " << z[i];\n\nreturn 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"array02geradeungeradeanzahlcpp"},"array02GeradeUngeradeAnzahl.cpp"),(0,i.kt)("p",null,"Ermitteln Sie die Anzahl der geraden und ungeraden Zahlen..."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='array02GeradeUngeradeAnzahl.cpp'",title:"'array02GeradeUngeradeAnzahl.cpp'"},'#include <iostream>\n#include <stdlib.h>\n#include <time.h>\n#include <cmath>\n#define ANZ 50\n\nusing namespace std;\n\nint main()\n{\n  int z[ANZ], i;\n  int gerade = 0, ungerade = 0;\n  srand(time(NULL));\n\n  for (i = 0; i < ANZ; i++)\n  {\n    z[i] = rand() % 100 + 1;\n  }\n\n  for (i = 0; i < ANZ; i++)\n  {\n    cout << z[i] << " ";\n    if ((i + 1) % 10 == 0)\n      cout << endl;\n    if (z[i] % 2 == 0)\n    {\n      ungerade++;\n    }\n    else\n    {\n      gerade++;\n    }\n  }\n  cout << "\\n---------------------\\n";\n\n  cout << "Ungerade:  " << ungerade << endl;\n  cout << "Gerade:  " << gerade << endl;\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"array02minmaxcpp"},"array02MinMax.cpp"),(0,i.kt)("p",null,"  Ermitteln Sie Minumum und Maximum der Zahlen"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='array02MinMax.cpp'",title:"'array02MinMax.cpp'"},'#include <iostream>\n#include <stdlib.h>\n#include <time.h>\n#include <cmath>\n#define ANZ 50\n\nusing namespace std;\n\n/*\nErmitteln Sie Minumum und Maximum der Zahlen\n*/\n\nint main()\n{\n  int min = 0;\n  int max = 0;\n  int z[ANZ], i;\n  srand(time(NULL));\n\n  for (i = 0; i < ANZ; i++)\n  {\n    z[i] = rand() % 100 + 1;\n  }\n\n  for (i = 0; i < ANZ; i++)\n  {\n    cout << z[i] << " ";\n    if ((i + 1) % 10 == 0)\n      cout << endl;\n    if (i == 0)\n    {\n      min = max = z[i];\n    }\n    else if (z[i] < min)\n    {\n      min = z[i];\n    }\n    else if (z[i] > max)\n    {\n      max = z[i];\n    }\n  }\n  cout << "\\n---------------------\\n";\n\n  cout << "min: " << min << endl;\n  cout << "max: " << max << endl;\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"0611"},"06.11")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"quadratzahlencpp"},"quadratzahlen.cpp"),(0,i.kt)("p",null,"  Ausgabe der Quadratzahlen:"),(0,i.kt)("p",null,"1 x 1 = 1"),(0,i.kt)("p",null,"2 x 2 = 4"),(0,i.kt)("p",null,"3 x 3 = 9"),(0,i.kt)("p",null,"..."),(0,i.kt)("p",null,"20 x 20 = 400"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='quadratzahlen.cpp'",title:"'quadratzahlen.cpp'"},'#include <iostream>\n/*\n1 x 1 = 1\n2 x 2 = 4\n3 x 3 = 9\n...\n20 x 20 =400\n*/\nusing namespace std;\n\nint main()\n{\n  int a = 1, b = 0;\n\n  for (a = 1; a <= 20; a++)\n  {\n    b = a * a;\n    // cout << a << " x " << a << " = " << b << endl;\n    printf("%3i x %2i = %3x\\n", a, a, b);\n  }\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h4",{id:"zerlegencpp"},"zerlegen.cpp"),(0,i.kt)("p",null,"  Zerlegen Sie eine bis zu vierstellige Zahl (Eingabe)\nund geben Sie die Teile einzeln aus, z.B.\n1234 = 1 Tausender + 2 Hunderter + 3 Zehner + 4 Einer"),(0,i.kt)("p",null,"689 = 6 Hunderter + 8 Zehner + 9 Einer"),(0,i.kt)("p",null,"7 = 7 Einer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='zerlegen.cpp'",title:"'zerlegen.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n#include <cmath>\n\nusing namespace std;\n\nint main()\n{\n  int zahl = 5678, t = 0, h = 0, z = 0;\n\n  // cout << "Zahl bitte: (max. 9999)";\n  // cin >> zahl;\n\n  t = zahl / 1000;\n  zahl = zahl % 1000;\n\n  h = zahl / 100;\n  zahl = zahl % 100;\n\n  z = zahl / 10;\n  zahl = zahl % 10;\n\n  if (t > 0)\n    cout << t << " Tausender + ";\n\n  cout << h << " Hunderter + ";\n  cout << z << " Zehner + ";\n  cout << zahl << " Einer";\n  // cout << endl << "Rest : " << zahl;\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"zerlegen2cpp"},"zerlegen2.cpp"),(0,i.kt)("p",null,"  Zerlegen Sie eine bis zu vierstellige Zahl (Eingabe)\nund geben Sie die Teile einzeln aus, z.B.\n1234 = 1 Tausender + 2 Hunderter + 3 Zehner + 4 Einer"),(0,i.kt)("p",null,"689 = 6 Hunderter + 8 Zehner + 9 Einer"),(0,i.kt)("p",null,"7 = 7 Einer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='zerlegen2.cpp'",title:"'zerlegen2.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n#include <cmath>\n\nusing namespace std;\n\nint main()\n{\n  int zahl, t = 0, h = 0, z = 0, i;\n  srand(time(NULL));\n\n  for (i = 1; i <= 10; i++)\n  {\n\n    zahl = rand() % 9999 + 1;\n    printf("Zahl: %4i => ", zahl);\n\n    t = zahl / 1000;\n    zahl = zahl % 1000;\n\n    h = zahl / 100;\n    zahl = zahl % 100;\n\n    z = zahl / 10;\n    zahl = zahl % 10;\n\n    if (t > 0)\n      cout << t << " Tausender + ";\n\n    cout << h << " Hunderter + ";\n    cout << z << " Zehner + ";\n    cout << zahl << " Einer\\n";\n  }\n\n  return 0;\n}\n\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"zerlegenpcpp"},"zerlegenP.cpp"),(0,i.kt)("p",null,"  Zerlegen Sie eine bis zu vierstellige Zahl (Eingabe)\nund geben Sie die Teile einzeln aus, z.B.\n1234 = 1 Tausender + 2 Hunderter + 3 Zehner + 4 Einer"),(0,i.kt)("p",null,"689 = 6 Hunderter + 8 Zehner + 9 Einer"),(0,i.kt)("p",null,"7 = 7 Einer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='zerlegenP.cpp'",title:"'zerlegenP.cpp'"},'#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n\n  int eingabe = 5432;\n\n  printf("%i x tausender \\n", eingabe / 1000);\n  printf("%i x hunderter \\n", eingabe % 1000 / 100);\n  printf("%i x zehner \\n", eingabe % 100 / 10);\n  printf("%i x einer \\n", eingabe % 10);\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"rechentrainer1cpp"},"rechenTrainer1.cpp"),(0,i.kt)("p",null,"  Rechentrainer mit Zufallszahlen"),(0,i.kt)("p",null,"Erweiterung1:\nOperatoren: ",(0,i.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"-"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"%")),(0,i.kt)("p",null,"Erweiterung2:\n10x Eingabe und Ausgabe"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='rechenTrainer1.cpp'",title:"'rechenTrainer1.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nusing namespace std;\n\nint main()\n{\n  int a, b, c, d;\n\n  srand(time(NULL));\n\n  a = rand() % 9 + 1;\n  b = rand() % 9 + 1;\n  c = a + b;\n\n  cout << a << " + " << b << " = ";\n  cin >> d;\n\n  if (d == c)\n    cout << "richtig geraten";\n  else\n    cout << "leider falsch";\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"rechentrainer2cpp"},"rechenTrainer2.cpp"),(0,i.kt)("p",null,"  Rechentrainer mit Zufallszahlen"),(0,i.kt)("p",null,"Erweiterung1:\nOperatoren: ",(0,i.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"-"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"%")),(0,i.kt)("p",null,"Erweiterung2:\n10x Eingabe und Ausgabe"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='rechenTrainer2.cpp'",title:"'rechenTrainer2.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nusing namespace std;\n\nint main()\n{\n  int a, b, c, eingabe, zuf;\n  char op;\n\n  srand(time(NULL));\n\n  a = rand() % 9 + 1;\n  b = rand() % 9 + 1;\n  zuf = rand() % 4;\n\n  switch (zuf)\n  {\n  case 0:\n    op = \'+\';\n    c = a + b;\n    break;\n  case 1:\n    op = \'-\';\n    c = a - b;\n    break;\n  case 2:\n  {\n    op = \'*\';\n    c = a * b;\n    break;\n  }\n  case 3:\n  {\n    op = \'%\';\n    c = a % b;\n    break;\n  }\n  }\n\n  cout << a << " " << op << " " << b << " = ";\n  cin >> eingabe;\n\n  if (eingabe == c)\n    cout << "richtig geraten";\n  else\n    cout << "leider falsch";\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"rechentrainer3cpp"},"rechenTrainer3.cpp"),(0,i.kt)("p",null,"  Rechentrainer mit Zufallszahlen"),(0,i.kt)("p",null,"Erweiterung1:\nOperatoren: ",(0,i.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"-"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"%")),(0,i.kt)("p",null,"Erweiterung2:\n10x Eingabe und Ausgabe"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='rechenTrainer3.cpp'",title:"'rechenTrainer3.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nusing namespace std;\n\nint main()\n{\n  int a, b, c, eingabe, zuf, i, zaehler = 0;\n  char op;\n\n  srand(time(NULL));\n\n  for (i = 1; i <= 5; i++)\n  {\n    a = rand() % 9 + 1;\n    b = rand() % 9 + 1;\n    zuf = rand() % 4;\n\n    switch (zuf)\n    {\n    case 0:\n      op = \'+\';\n      c = a + b;\n      break;\n    case 1:\n      op = \'-\';\n      c = a - b;\n      break;\n    case 2:\n    {\n      op = \'*\';\n      c = a * b;\n      break;\n    }\n    case 3:\n    {\n      op = \'%\';\n      c = a % b;\n      break;\n    }\n    }\n\n    cout << a << " " << op << " " << b << " = ";\n    cin >> eingabe;\n\n    if (eingabe == c)\n      zaehler++;\n  }\n  cout << "Sie haben " << zaehler << " Aufgaben richtig beantwortet.";\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"rechentrainerpcpp"},"rechenTrainerP.cpp"),(0,i.kt)("p",null,"  Rechentrainer mit Zufallszahlen"),(0,i.kt)("p",null,"Erweiterung1:\nOperatoren: ",(0,i.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"-"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"%")),(0,i.kt)("p",null,"Erweiterung2:\n10x Eingabe und Ausgabe"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='rechenTrainer3.cpp'",title:"'rechenTrainer3.cpp'"},"#include <iostream>\n#define OG 20\n#define UG 10\n\nusing namespace std;\n\nint main()\n{\n  int a = 0, b = 0, c = 0, d = 0, operat = 0;\n  char op = ' ';\n\n  for (int i = 1; i <= 10; i++)\n  {\n    srand(time(NULL)); // Start Random\n    a = rand() % (OG - UG + 1) + UG;\n    b = rand() % (OG - UG + 1) + UG;\n    operat = rand() % 4;\n\n    if (operat == 0)\n    {\n      op = '+';\n      c = a + b;\n    }\n    else if (operat == 1)\n    {\n      op = '-';\n      c = a - b;\n    }\n    else if (operat == 2)\n    {\n      op = '*';\n      c = a * b;\n    }\n    else if (operat == 3)\n    {\n      op = '%';\n      c = a % b;\n    }\n\n    printf(\"Was ist das Ergebnis von %i %c %i?\\n\", a, op, b);\n    cin >> d;\n\n    while (d != c)\n    {\n      printf(\"Eingabe falsch! \\n\");\n      printf(\"Was ist das Ergebnis von %i %c %i?\\n\", a, op, b);\n      cin >> d;\n    }\n\n    printf(\"Gut gerechnet!\\n\");\n  }\n\n  return 0;\n}\n"))),(0,i.kt)("br",null),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"0711"},"07.11")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"arr01cpp"},"arr01.cpp"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='arr01.cpp'",title:"'arr01.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n#define ANZAHL 50\n\nusing namespace std;\n\nint main()\n{\n  int a[ANZAHL] = {0}, i, mini, maxi;\n  srand(time(NULL));\n\n  for (i = 0; i < ANZAHL; i++)\n  {\n    a[i] = rand() % 100 + 1;\n    cout << a[i] << " ";\n  }\n\n  mini = maxi = a[0];\n  for (i = 1; i < ANZAHL; i++)\n  {\n    if (a[i] > maxi)\n    {\n      maxi = a[i];\n    }\n    else if (a[i] < mini)\n    {\n      mini = a[i];\n    }\n  }\n  printf("\\nMinimum ist: %i", mini);\n  printf("\\nMaximum ist: %i", maxi);\n\n  return 0;\n}\n\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"arr02stringscpp"},"arr02strings.cpp"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='arr02strings.cpp'",title:"'arr02strings.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n#include <cmath>\n\nusing namespace std;\n\nint main()\n{\n  string namen[5];\n  int i;\n\n  for (i = 0; i < 5; i++)\n  {\n    cout << "Name:";\n    cin >> namen[i];\n  }\n\n  cout << "\\n----------------------\\n";\n  for (i = 0; i < 5; i++)\n  {\n    cout << namen[i] << " ";\n  }\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"0811"},"08.11")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"arrwuerfelncpp"},"arrWuerfeln.cpp"),(0,i.kt)("p",null,'  Ein Programm soll 100/1000/10.000/... mal "w\xfcrfeln".'),(0,i.kt)("p",null,"Ermitteln Sie, wie oft jede Zahl (1-6) jeweils geworfen wurde."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='arrWuerfeln.cpp'",title:"'arrWuerfeln.cpp'"},'#include <iostream>\n#include <stdlib.h>\n#include <time.h>\n#define OG 6\n#define UG 1\n#define ANZAHL 60\n\nusing namespace std;\n\nint main()\n{\n  int i, zufall, z[7] = {0};\n\n  srand(time(NULL)); // Start Random\n\n  for (i = 1; i <= ANZAHL; i++)\n  {\n    zufall = rand() % (OG - UG + 1) + UG;\n    cout << zufall << " ";\n    if (i % 20 == 0)\n    {\n      cout << "\\n";\n    }\n    switch (zufall)\n    {\n    case 1:\n      z[1]++;\n      break;\n    case 2:\n      z[2]++;\n      break;\n    case 3:\n      z[3]++;\n      break;\n    case 4:\n      z[4]++;\n      break;\n    case 5:\n      z[5]++;\n      break;\n    case 6:\n      z[6]++;\n      break;\n    }\n  }\n\n  for (i = 1; i < 7; i++)\n  {\n    cout << "\\n " << i << ": " << z[i] << " mal";\n  }\n\n  return 0;\n}\n')),(0,i.kt)("p",null,"alternativ als array:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='arrWuerfeln2.cpp'",title:"'arrWuerfeln2.cpp'"},'#include <iostream>\n#include <stdlib.h>\n#include <time.h>\n#define OG 6\n#define UG 1\n#define ANZAHL 60\n\nusing namespace std;\n\nint main()\n{\n  int i, zufall, z[7] = {0};\n\n  srand(time(NULL)); // Start Random\n\n  for (i = 1; i <= ANZAHL; i++)\n  {\n    zufall = rand() % (OG - UG + 1) + UG;\n    cout << zufall << " ";\n    if (i % 20 == 0)\n    {\n      cout << "\\n";\n    }\n    z[zufall]++;\n  }\n\n  for (i = 1; i < 7; i++)\n  {\n    cout << "\\n " << i << ": " << z[i] << " mal";\n  }\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"volumencpp"},"volumen.cpp"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"alt",src:a(35655).Z,width:"1650",height:"571"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='volumen.cpp'",title:"'volumen.cpp'"},'#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n  double volumen = 0.0, a = 10.0, h = 0.0, aMax = 0.0, hMax = 0.0, volMax = 0.0;\n\n  while (h <= a / 2)\n  {\n    volumen = (a - 2 * h) * (a - 2 * h) * h;\n\n    if (volumen > volMax)\n    {\n      volMax = volumen;\n      aMax = a - 2 * h;\n      hMax = h;\n    }\n    h *= 10;\n    h += 1;\n    h /= 10;\n  }\n\n  cout << "Groesste Volumen ist " << volMax << endl;\n  cout << "Seitenlaenge :" << aMax << endl;\n  cout << "Hoehe :" << hMax << endl;\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"arraygeradeuebertragen"},"arrayGeradeUebertragen"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='arrGeradeUebertragen.cpp'",title:"'arrGeradeUebertragen.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n#include <cmath>\n\nusing namespace std;\n\nint main()\n{\n  int arr[10], arrGerade[10] = {0}, i, k = 0;\n  srand(time(NULL));\n\n  for (i = 0; i < 10; i++)\n  {\n    arr[i] = rand() % (50 - 10 + 1) + 10;\n    cout << arr[i] << " ";\n  }\n  cout << endl;\n  for (i = 0; i < 10; i++)\n  {\n    if (arr[i] % 2 == 0)\n    {\n      arrGerade[k] = arr[i];\n      // cout << arrGerade[k] << " ";\n      k++;\n    }\n  }\n\n  for (i = 0; i < k; i++)\n  {\n    cout << arrGerade[i] << " ";\n  }\n  return 0;\n}\n')),(0,i.kt)("p",null,"alternativ:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='arrGeradeUebertragenP.cpp'",title:"'arrGeradeUebertragenP.cpp'"},'#include <iostream>\n#include <ctime>\n#define OG 50\n#define UG 10\n#define ANZAHL 10\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n  int erstes[ANZAHL] = {0}, zweites[ANZAHL] = {0}, i = 0;\n\n  srand(time(NULL));\n\n  for (i = 0; i < ANZAHL; i++)\n  {\n    erstes[i] = rand() % (OG - UG + 1) + UG;\n    zweites[i] = erstes[i] * 2;\n\n    cout << "Erstes[" << i << "]: " << erstes[i] << "   "\n         << "Zweites[" << i << "]: " << zweites[i] << endl;\n  }\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"0911"},"09.11")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"minimumsort"},"minimumSort"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='minimumSort.cpp'",title:"'minimumSort.cpp'"},'#include <iostream>\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n  int arr[5] = {7, 12, 2, 15, 9}, i, hilf, k;\n\n  cout << "Vorher: ";\n  for (i = 0; i < 5; i++)\n  {\n    printf("%4i ", arr[i]);\n  }\n\n  for (i = 0; i < 4; i++)\n  {\n    for (k = 0; k < 5; k++)\n    {\n      hilf = arr[i];\n      arr[i] = arr[k];\n      arr[k] = hilf;\n    }\n  }\n\n  cout << "\\nNachher:";\n  for (i = 0; i < 5; i++)\n  {\n    printf("%4i ", arr[i]);\n  }\n\n  return 0;\n}\n')),(0,i.kt)("p",null,"alternativ mit Konstante f\xfcr Arraygr\xf6\xdfe:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='minimumSort2.cpp'",title:"'minimumSort2.cpp'"},'#include <iostream>\n#define ANZ 5\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n  int arr[ANZ] = {7, 12, 2, 15, 9}, i, hilf, k;\n\n  cout << "Vorher: ";\n  for (i = 0; i < ANZ; i++)\n  {\n    printf("%4i ", arr[i]);\n  }\n\n  for (i = 0; i < ANZ - 1; i++)\n  {\n    for (k = 0; k < 5; k++)\n    {\n      hilf = arr[i];\n      arr[i] = arr[k];\n      arr[k] = hilf;\n    }\n  }\n\n  cout << "\\nNachher:";\n  for (i = 0; i < ANZ; i++)\n  {\n    printf("%4i ", arr[i]);\n  }\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"minimumsortzufallcpp"},"minimumSortZufall.cpp"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='minimumSortZufall.cpp'",title:"'minimumSortZufall.cpp'"},'#include <iostream>\n#include <ctime>\n#define ANZ 5\n#define OG 100\n#define UG 1\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n  int arr[ANZ] = {}, i, hilf, k;\n\n  srand(time(NULL));\n\n  for (i = 0; i < ANZ; i++)\n  {\n    arr[i] = rand() % (OG - UG - 1) + UG;\n  }\n\n  cout << "Vorher: ";\n  for (i = 0; i < ANZ; i++)\n  {\n    printf("%4i ", arr[i]);\n  }\n\n  for (i = 0; i < ANZ - 1; i++)\n  {\n    for (k = 0; k < 5; k++)\n    {\n      hilf = arr[i];\n      arr[i] = arr[k];\n      arr[k] = hilf;\n    }\n  }\n\n  cout << "\\nNachher:";\n  for (i = 0; i < ANZ; i++)\n  {\n    printf("%4i ", arr[i]);\n  }\n\n  return 0;\n}\n')),(0,i.kt)("p",null,"alternativ mit Angabe Schleifendurchl\xe4ufe und Tauschanzahl:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='minimumSortZufall2.cpp'",title:"'minimumSortZufall2.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n#define ANZ 20\n\nusing namespace std;\n\nint main()\n{\n  int arr[ANZ], hilf, tausch = 0, schleifen = 0;\n  int i, k;\n\n  srand(time(NULL));\n  cout << "Vorher:\\n";\n  for (i = 0; i < ANZ; i++)\n  {\n    arr[i] = i; // rand()%100+1;\n    cout << arr[i] << " ";\n  }\n\n  for (i = 0; i < ANZ - 1; i++)\n  {\n    for (k = i + 1; k < ANZ; k++)\n    {\n      schleifen++;\n      if (arr[k] < arr[i])\n      {\n        tausch++;\n        hilf = arr[i];\n        arr[i] = arr[k];\n        arr[k] = hilf;\n      }\n    }\n  }\n\n  cout << "\\nNachher:\\n";\n  for (i = 0; i < ANZ; i++)\n  {\n    cout << arr[i] << " ";\n  }\n\n  cout << "\\nEs wurde " << tausch << " mal getauscht.";\n  cout << "\\nSchleifendurchl\\204ufe: " << schleifen;\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"bubblesortcpp"},"bubbleSort.cpp"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='bubbleSort.cpp'",title:"'bubbleSort.cpp'"},'#include <iostream>\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n  int arr[5] = {25, 9, 14, 25, 7}, anz = 5, i = 0, hilf = 0;\n  bool tausch = true;\n\n  printf("Vorher: ");\n  for (i = 0; i < 5; i++)\n  {\n    printf("%3i ", arr[i]);\n  }\n\n  do\n  {\n    tausch = false;\n    anz = anz - 1;\n    for (i = 0; i < anz; i++)\n    {\n      if (arr[i] > arr[i + 1])\n      {\n        hilf = arr[i];\n        arr[i] = arr[i + 1];\n        arr[i + 1] = hilf;\n        tausch = true;\n      }\n    }\n\n  } while (tausch == true);\n\n  printf("\\nNachher:");\n  for (i = 0; i < 5; i++)\n  {\n    printf("%3i ", arr[i]);\n  }\n\n  return 0;\n}\n')),(0,i.kt)("p",null,"alternativ mit Angabe Schleifendurchl\xe4ufe und Tauschanzahl:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='bubbleSort2.cpp'",title:"'bubbleSort2.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n#define ANZ 10\n\nusing namespace std;\n\nint main()\n{\n  int arr[ANZ], hilf, tausch = 0, schleifen = 0;\n  int i, anz = ANZ;\n  bool getauscht;\n\n  srand(time(NULL));\n  cout << "Vorher:\\n";\n  for (i = 0; i < ANZ; i++)\n  {\n    arr[i] = rand() % 10 + 1;\n    cout << arr[i] << " ";\n  }\n\n  do\n  {\n    getauscht = false;\n    anz--;\n    for (i = 0; i < anz; i++)\n    {\n      schleifen++;\n      if (arr[i + 1] < arr[i])\n      {\n        tausch++;\n        hilf = arr[i];\n        arr[i] = arr[i + 1];\n        arr[i + 1] = hilf;\n        getauscht = true;\n      }\n    }\n  } while (getauscht == true);\n\n  cout << "\\nNachher:\\n";\n  for (i = 0; i < ANZ; i++)\n  {\n    cout << arr[i] << " ";\n  }\n\n  cout << "\\nEs wurde " << tausch << " mal getauscht.";\n  cout << "\\nSchleifendurchl\\204ufe: " << schleifen;\n\n  return 0;\n}\n')),(0,i.kt)("p",null,"Text-Array:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='bubbleSortString.cpp'",title:"'bubbleSortString.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\n#define ANZ 5\n\nusing namespace std;\n\nint main()\n{\n  string arr[ANZ] = {"Hans", "Anton", "Stefanie", "Stefan", "Stef"}, hilf;\n  int i, anz = ANZ, tausch = 0, schleifen = 0;\n  bool getauscht;\n\n  srand(time(NULL));\n  cout << "Vorher:\\n";\n  for (i = 0; i < ANZ; i++)\n  {\n    cout << arr[i] << " ";\n  }\n\n  do\n  {\n    getauscht = false;\n    anz--;\n    for (i = 0; i < anz; i++)\n    {\n      schleifen++;\n      if (arr[i + 1] < arr[i])\n      {\n        tausch++;\n        hilf = arr[i];\n        arr[i] = arr[i + 1];\n        arr[i + 1] = hilf;\n        getauscht = true;\n      }\n    }\n  } while (getauscht == true);\n\n  cout << "\\nNachher:\\n";\n  for (i = 0; i < ANZ; i++)\n  {\n    cout << arr[i] << " ";\n  }\n\n  cout << "\\nEs wurde " << tausch << " mal getauscht.";\n  cout << "\\nSchleifendurchl\\204ufe: " << schleifen;\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"arraysearchcpp"},"arraySearch.cpp"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='arraySearch.cpp'",title:"'arraySearch.cpp'"},'#include <iostream>\n\n/*\nArray nach Benutzereingabe durchsuchen\n*/\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\nstring arr[5] = {"Hans", "Stefan", "Stefanie", "Peter", "Paul"}, ein = " ";\nint i = 0;\n\nprintf("Bitte zu durchsuchenden Namen eingeben:");\ncin >> ein;\n\nfor (i = 0; i < 5; i++)\n{\n  if (ein == arr[i])\n  {\n    printf("%s gefunden: arr[%i]", ein.c_str(), i);\n  }\n}\nreturn 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"arraygewinnercpp"},"arrayGewinner.cpp"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='arrayGewinner.cpp'",title:"'arrayGewinner.cpp'"},'#include <iostream>\n#include <ctime>\n\n/*\nzuf\xe4llig einen Gewinner aus dem Array ermitteln\n*/\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n  string arr[5] = {"Hans", "Stefan", "Stefanie", "Peter", "Paul"};\n\n  srand(time(NULL));\n\n  printf("%s hat gewonnen", arr[rand() % 5].c_str());\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"1011"},"10.11")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"\xfcbungsklausur-6"},"\xdcbungsklausur 6"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='uebKlausur6.cpp'",title:"'uebKlausur6.cpp'"},'#include <iostream>\nusing namespace std;\n\nint main()\n{\n  double a = 10, s = 0, v = 0, vmax = 0, smax = 0, l = 0.01;\n  while (v >= vmax)\n  {\n    v = (a - 2 * s) * (a - 2 * s) * s;\n    cout << "Schnittl\\204nge " << s << " akt. Volumen " << v << endl;\n    if (vmax < v)\n    {\n      vmax = v;\n      smax = s;\n    }\n    s += l;\n  }\n  cout << "Maximales Volumen von " << vmax << " bei " << smax;\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"\xfcbungsklausur-7"},"\xdcbungsklausur 7"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='uebKlausur7.cpp'",title:"'uebKlausur7.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\nusing namespace std;\n\nint main()\n{\n  int bsp[10] = {25, 3, 31, 8, 55, 43, 21, 17, 49, 85};\n  int ung[5] = {0}, i = 0, k = 0, hilf;\n\n  // while(k<5 && i<10){\n  for (i = 0; i < 10 && k < 5; i++)\n  {\n    if (bsp[i] % 2 == 1)\n    {\n      ung[k] = bsp[i];\n      k++;\n    }\n    //  i++;\n  }\n\n  for (i = 0; i < 5; i++)\n  {\n    cout << ung[i] << " ";\n  }\n  return 0;\n}\n'))),(0,i.kt)("br",null))}k.isMDXComponent=!0},40774:(n,e,a)=>{a.d(e,{Z:()=>i});const i=a.p+"assets/images/17.10-minMax-0d7a9d16f84d303a1638d039c8d7f937.png"},57420:(n,e,a)=>{a.d(e,{Z:()=>i});const i=a.p+"assets/images/18.10-minMax2-fe5a8365622d3fade135e42b2c13d0b1.png"},35655:(n,e,a)=>{a.d(e,{Z:()=>i});const i=a.p+"assets/images/18.11-volumen-22d5cda5fa34c44b59cbb9aa8fb66d80.png"}}]);