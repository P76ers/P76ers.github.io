"use strict";(self.webpackChunkcodingdocs=self.webpackChunkcodingdocs||[]).push([[2825],{3905:(n,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>h});var i=t(67294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function l(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function u(n,e){if(null==n)return{};var t,i,a=function(n,e){if(null==n)return{};var t,i,a={},r=Object.keys(n);for(i=0;i<r.length;i++)t=r[i],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(i=0;i<r.length;i++)t=r[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var p=i.createContext({}),s=function(n){var e=i.useContext(p),t=e;return n&&(t="function"==typeof n?n(e):l(l({},e),n)),t},c=function(n){var e=s(n.components);return i.createElement(p.Provider,{value:e},n.children)},m="mdxType",d={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},o=i.forwardRef((function(n,e){var t=n.components,a=n.mdxType,r=n.originalType,p=n.parentName,c=u(n,["components","mdxType","originalType","parentName"]),m=s(t),o=a,h=m["".concat(p,".").concat(o)]||m[o]||d[o]||r;return t?i.createElement(h,l(l({ref:e},c),{},{components:t})):i.createElement(h,l({ref:e},c))}));function h(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var r=t.length,l=new Array(r);l[0]=o;var u={};for(var p in e)hasOwnProperty.call(e,p)&&(u[p]=e[p]);u.originalType=n,u[m]="string"==typeof n?n:a,l[1]=u;for(var s=2;s<r;s++)l[s]=t[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}o.displayName="MDXCreateElement"},22315:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>p,default:()=>b,frontMatter:()=>u,metadata:()=>s,toc:()=>m});t(67294);var i=t(3905);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){return e=null!=e?e:{},Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):function(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))})),n}function l(n,e){if(null==n)return{};var t,i,a=function(n,e){if(null==n)return{};var t,i,a={},r=Object.keys(n);for(i=0;i<r.length;i++)t=r[i],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(i=0;i<r.length;i++)t=r[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}const u={hide_title:!0,sidebar_position:7,sidebar_label:"Vorlesung",tags:["linguae","cpp","c++","cplusplus","aufgaben"]},p=void 0,s={unversionedId:"Aufgaben/vorlesung",id:"Aufgaben/vorlesung",title:"vorlesung",description:"## 13.10",source:"@site/docs/cpp/Aufgaben/vorlesung.mdx",sourceDirName:"Aufgaben",slug:"/Aufgaben/vorlesung",permalink:"/cpp/Aufgaben/vorlesung",draft:!1,editUrl:"https://p76ers.github.io/docs/cpp/Aufgaben/vorlesung.mdx",tags:[{label:"linguae",permalink:"/cpp/tags/linguae"},{label:"cpp",permalink:"/cpp/tags/cpp"},{label:"c++",permalink:"/cpp/tags/c"},{label:"cplusplus",permalink:"/cpp/tags/cplusplus"},{label:"aufgaben",permalink:"/cpp/tags/aufgaben"}],version:"current",lastUpdatedAt:1700059805,formattedLastUpdatedAt:"Nov 15, 2023",sidebarPosition:7,frontMatter:{hide_title:!0,sidebar_position:7,sidebar_label:"Vorlesung",tags:["linguae","cpp","c++","cplusplus","aufgaben"]},sidebar:"tutorialSidebar",previous:{title:"13.5",permalink:"/cpp/Aufgaben/13.5"}},c={},m=[{value:"13.10",id:"1310",level:2},{value:"while.cpp",id:"whilecpp",level:3},{value:"for.cpp",id:"forcpp",level:3},{value:"16.10",id:"1610",level:2},{value:"EVA-Prinzip",id:"eva-prinzip",level:3},{value:"teilenMitModulo.cpp",id:"teilenmitmodulocpp",level:3},{value:"teilenOhneModulo.cpp",id:"teilenohnemodulocpp",level:3},{value:"17.10",id:"1710",level:2},{value:"zufallZahlen",id:"zufallzahlen",level:3},{value:"MinMax.cpp",id:"minmaxcpp",level:3},{value:"18.10",id:"1810",level:2},{value:"minMax2.cpp",id:"minmax2cpp",level:3},{value:"minMaxZufallZahlen.cpp",id:"minmaxzufallzahlencpp",level:3},{value:"19.10",id:"1910",level:2},{value:"minMaxZufallZahlen2.cpp",id:"minmaxzufallzahlen2cpp",level:3},{value:"20.10",id:"2010",level:2},{value:"array01.cpp",id:"array01cpp",level:3},{value:"array02.cpp",id:"array02cpp",level:3},{value:"array02GeradeUngeradeAnzahl.cpp",id:"array02geradeungeradeanzahlcpp",level:3},{value:"array02MinMax.cpp",id:"array02minmaxcpp",level:3},{value:"06.11",id:"0611",level:2},{value:"quadratzahlen.cpp",id:"quadratzahlencpp",level:3},{value:"zerlegen.cpp",id:"zerlegencpp",level:3},{value:"zerlegenP.cpp",id:"zerlegenpcpp",level:3},{value:"zerlegenZufall.cpp",id:"zerlegenzufallcpp",level:3},{value:"rechenTrainer1.cpp",id:"rechentrainer1cpp",level:3},{value:"rechenTrainer2.cpp",id:"rechentrainer2cpp",level:3},{value:"rechenTrainer3.cpp",id:"rechentrainer3cpp",level:3},{value:"rechenTrainerP.cpp",id:"rechentrainerpcpp",level:3},{value:"07.11",id:"0711",level:2},{value:"arr01.cpp",id:"arr01cpp",level:3},{value:"arr02strings.cpp",id:"arr02stringscpp",level:3},{value:"minMax.cpp",id:"minmaxcpp-1",level:3},{value:"08.11",id:"0811",level:2},{value:"arrWuerfeln.cpp",id:"arrwuerfelncpp",level:3},{value:"volumen.cpp",id:"volumencpp",level:3},{value:"arrayGeradeUebertragen",id:"arraygeradeuebertragen",level:3},{value:"arrMultiplizierenUebertragen.cpp",id:"arrmultiplizierenuebertragencpp",level:3},{value:"09.11",id:"0911",level:2},{value:"minimumSort",id:"minimumsort",level:3},{value:"minimumSortZufall.cpp",id:"minimumsortzufallcpp",level:3},{value:"bubbleSort.cpp",id:"bubblesortcpp",level:3},{value:"arraySearch.cpp",id:"arraysearchcpp",level:3},{value:"arrayGewinner.cpp",id:"arraygewinnercpp",level:3},{value:"10.11",id:"1011",level:2},{value:"\xdcbungsklausur 3",id:"\xfcbungsklausur-3",level:3},{value:"\xdcbungsklausur 4",id:"\xfcbungsklausur-4",level:3},{value:"\xdcbungsklausur 5",id:"\xfcbungsklausur-5",level:3},{value:"\xdcbungsklausur 6",id:"\xfcbungsklausur-6",level:3},{value:"\xdcbungsklausur 7",id:"\xfcbungsklausur-7",level:3},{value:"13.11",id:"1311",level:2},{value:"array2DZufallZahlen.cpp",id:"array2dzufallzahlencpp",level:3},{value:"arrayMinMax",id:"arrayminmax",level:3},{value:"Array Systemhaus",id:"array-systemhaus",level:3},{value:"Array Krankenhaus",id:"array-krankenhaus",level:3},{value:"14.10",id:"1410",level:2},{value:"Funktionen",id:"funktionen",level:3},{value:"15.11",id:"1511",level:2},{value:"fktDefaults.cpp",id:"fktdefaultscpp",level:3},{value:"fktUeberladung.cpp",id:"fktueberladungcpp",level:3},{value:"fktZinseszins.cpp",id:"fktzinseszinscpp",level:3},{value:"rundenfktRunden.cpp",id:"rundenfktrundencpp",level:3},{value:"16.11",id:"1611",level:2},{value:"fktArrSort.cpp",id:"fktarrsortcpp",level:3},{value:"fktArrMinMax.cpp",id:"fktarrminmaxcpp",level:3},{value:"fktPtrQuadrat.cpp",id:"fktptrquadratcpp",level:3},{value:"fktPtrArrMinMax.cpp",id:"fktptrarrminmaxcpp",level:3},{value:"fktPtrTausch.cpp",id:"fktptrtauschcpp",level:3},{value:"multi()",id:"multi",level:3},{value:"Die Phrasendreschmaschine",id:"die-phrasendreschmaschine",level:3}],d=n=>function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)},o=d("CardHeading"),h=d("CardChapter"),g=d("CardDanger"),k={toc:m},f="wrapper";function b(n){var{components:e}=n,u=l(n,["components"]);return(0,i.kt)(f,r(function(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{},i=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(t).filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable})))),i.forEach((function(e){a(n,e,t[e])}))}return n}({},k,u),{components:e,mdxType:"MDXLayout"}),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"1310"},"13.10")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"whilecpp"},"while.cpp"),(0,i.kt)("p",null,"  Geben Sie die Zahlen von 1-10 in der Konsole aus."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='while.cpp'",title:"'while.cpp'"},'#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n  int z = 0;\n\n  while (z <= 10)\n  {\n    cout << z << "\\n";\n    z++;\n  }\n\n  return 0;\n}\n')),(0,i.kt)("p",null,"alternativ:"),(0,i.kt)("h3",{id:"forcpp"},"for.cpp"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='for.cpp'",title:"'for.cpp'"},'#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n\n  for (int z = 0; z <= 10; z++)\n  {\n    cout << z << "\\n";\n  }\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"1610"},"16.10")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"eva-prinzip"},"EVA-Prinzip"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='eva.cpp'",title:"'eva.cpp'"},'#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n  int a = 0;\n  int b = 0;\n\n  // Eingabe\n  //\n  cout << "Eingabe von a: \\n";\n  cin >> a;\n  cout << "Eingabe von b: \\n";\n  cin >> b;\n\n  // Verarbeitung\n\n  // modulo funktioniert nur bei integer\n  a %= b;\n\n  // int werden abgeschnitten\n  // a /= b;\n\n  // Ausgabe\n  cout << a;\n\n  /*\n  Eingabe 3 und 8     -   299 und 100\n  Ergebnis 0 Rest 3   -   2 Test 99\n  */\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"teilenmitmodulocpp"},"teilenMitModulo.cpp"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='teilenMitModulo.cpp'",title:"'teilenMitModulo.cpp'"},'#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n// Deklarationen und Initialisierungen\nint a = 0, b = 0, c = 0;\n\n// Eingabe(n)\ncout << "Eingabe a bitte: ";\ncin >> a; // "Console Input"\ncout << "Eingabe b bitte: ";\ncin >> b; // "Console Input"\n\n// Verarbeitung\nc = a / b;\na %= b; // a = a / b\n\n// Ausgabe(n)\n//  Eingaben: 3 und 8  -  299 und 100\n//  Ausgabe:  0 Rest 3 -   2 Rest 99\n\ncout << c << " Rest " << a; // "Console Output"\nreturn 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"teilenohnemodulocpp"},"teilenOhneModulo.cpp"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='teilenOhneModulo.cpp'",title:"'teilenOhneModulo.cpp'"},'#include <iostream>\n\n/*\nTeilen ohne modulo...\n  b != 0\n  a > b\n    z.B.  Eingaben: 3 und 8  -  299 und 100\n    ->    Ausgabe:  0 Rest 3 -   2 Rest 99\n*/\n\nusing namespace std;\n\nint main()\n{\n  int a = 0, b = 0, c = 0;\n\n  cout << "Eingabe a bitte: ";\n  cin >> a;\n  cout << "Eingabe b bitte: ";\n  cin >> b;\n\n  while (a >= b)\n  {\n    a -= b;\n    c++;\n  }\n\n  cout << c << " Rest " << a;\n  return 0;\n}\n\n'))),(0,i.kt)("br",null),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"1710"},"17.10")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"zufallzahlen"},"zufallZahlen"),(0,i.kt)("p",null,"  Geben Sie 50 zuf\xe4llig ermittelte Zahlen in der Konsole aus."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='zufallZahlen.cpp'",title:"'zufallZahlen.cpp'"},'#include <iostream>\n#include <stdlib.h>\n#include <time.h>\n#define OG 6\n#define UG 1\n\nusing namespace std;\n\nint main()\n{\n  int i, zufall;\n  srand(time(NULL)); // Start Random\n\n  for (i = 1; i <= 50; i++)\n  {\n    // zufall = rand() % (Obergrenze - Untergrenze +1 ) + Untergrenze\n    zufall = rand() % (OG - UG + 1) + UG;\n    cout << zufall << " ";\n    if (i % 10 == 0)\n    {\n      cout << endl;\n    }\n  }\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"minmaxcpp"},"MinMax.cpp"),(0,i.kt)("p",null,"  Bestimmen Sie Minimum und Maximum, sowie Durchschnitt von Zahlen und geben Sie diese in der Konsole aus."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"alt",src:t(40774).Z,width:"1072",height:"399"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='MinMax.cpp'",title:"'MinMax.cpp'"},'#include <iostream>\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n\n  int i = 0, mini = 0, maxi = 0, zahl = 0;\n  float summe = 0.0, durch = 0.0;\n\n  cout << "Bitte erste Zahl eingeben:" << endl;\n  cin >> zahl;\n\n  mini = zahl;\n  maxi = zahl;\n  summe = zahl;\n\n  for (i = 1; i < 5; i++)\n  {\n    cout << "Bitte naechste Zahl eingeben:" << endl;\n    cin >> zahl;\n    summe += zahl;\n    if (zahl > maxi)\n    {\n      maxi = zahl;\n    }\n    else if (zahl < mini)\n    {\n      mini = zahl;\n    }\n  }\n  durch = summe / i;\n\n  cout << "Minimum:" << mini << endl;\n  cout << "Maximum:" << maxi << endl;\n  cout << "Durchschnitt" << durch << endl;\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"1810"},"18.10")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"minmax2cpp"},"minMax2.cpp"),(0,i.kt)("p",null,"  Bestimmen Sie Minimum und Maximum, sowie Durchschnitt von Zahlen und geben Sie diese in der Konsole aus."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"alt",src:t(57420).Z,width:"512",height:"983"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='minMax2.cpp'",title:"'minMax2.cpp'"},'#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n\n  int i, mini = 0, maxi = 0, zahl = 0;\n  float summe = 0.0, durch = 0.0;\n\n  for (i = 1; i <= 5; i++)\n  {\n    cout << "Zahl bitte: ";\n    cin >> zahl;\n    summe = summe + zahl;\n    if (i == 1)\n    {\n      maxi = zahl;\n      mini = zahl;\n    }\n    else if (zahl > maxi)\n    {\n      maxi = zahl;\n    }\n    else if (zahl < mini)\n    {\n      mini = zahl;\n    }\n  }\n\n  durch = summe / i;\n\n  cout << "\\nMinimum: " << mini;\n  cout << "\\nMaximum: " << maxi;\n  cout << "\\nDurchschnitt: " << durch;\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"minmaxzufallzahlencpp"},"minMaxZufallZahlen.cpp"),(0,i.kt)("p",null,"best practice: "),(0,i.kt)("p",null,"Zuweisung des ersten Wertes vor der Schleife ist effizienter,\nda der Ausdruck nicht bei jedem Schleifendrchlauf \xfcberpr\xfcft wird"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='minMaxZufallZahlen.cpp'",title:"'minMaxZufallZahlen.cpp'"},'#include <iostream>\n#include <stdlib.h>\n#include <time.h>\n#define OG 200\n#define UG 100\n\nusing namespace std;\n\nint main()\n{\n\n  int i = 0, mini = 0, maxi = 0, zahl = 0;\n  float summe = 0.0, durch = 0.0;\n\n  srand(time(NULL)); // Start Random\n  zahl = rand() % (OG - UG + 1) + UG;\n\n// highlight-start\n  mini = zahl;\n  maxi = zahl;\n  summe = zahl;\n// highlight-end\n\n  for (i = 1; i < 10; i++)\n  {\n\n    zahl = rand() % (OG - UG + 1) + UG;\n\n    summe += zahl;\n    if (zahl > maxi)\n    {\n      maxi = zahl;\n    }\n    else if (zahl < mini)\n    {\n      mini = zahl;\n    }\n  }\n  durch = summe / i;\n\n  cout << "Minimum:" << mini << endl;\n  cout << "Maximum:" << maxi << endl;\n  cout << "Durchschnitt" << durch << endl;\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"1910"},"19.10")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"minmaxzufallzahlen2cpp"},"minMaxZufallZahlen2.cpp"),(0,i.kt)("p",null,"Pr\xfcfung, ob erster Durchlauf ist (zwecks Zuweisung des ersten Wertes), erfolgt bei jedem Schleifendurchlauf."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='minMaxZufallZahlen2.cpp'",title:"'minMaxZufallZahlen2.cpp'"},'#include <iostream>\n#include <stdlib.h>\n#include <time.h>\n#define OG 500\n#define UG 1\n#define ANZAHL 100\n\nusing namespace std;\n\nint main()\n{\n\n  int i, mini = 0, maxi = 0, zahl = 0;\n  float summe = 0.0, durch = 0.0;\n  srand(time(NULL));\n\n  for (i = 1; i <= ANZAHL; i++)\n  {\n    zahl = rand() % (OG - UG + 1) + UG;\n    printf("%3i ", zahl);\n\n    if (i % 10 == 0)\n    {\n      printf("\\n");\n    }\n    summe = summe + zahl;\n      // highlight-start\n    if (i == 1)\n    {\n      maxi = zahl;\n      mini = zahl;\n    }\n      // highlight-end\n    else if (zahl > maxi)\n    {\n      maxi = zahl;\n    }\n    else if (zahl < mini)\n    {\n      mini = zahl;\n    }\n  }\n\n  durch = summe / ANZAHL;\n\n  cout << "\\nMinimum: " << mini;\n  cout << "\\nMaximum: " << maxi;\n  cout << "\\nDurchschnitt: " << durch;\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"2010"},"20.10")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"array01cpp"},"array01.cpp"),(0,i.kt)("p",null,"Eingabe von 5 Werten \xfcber Konsole und speichern dieser im Array.\nRandom Ausgabe eines Array-Elements."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='array01.cpp'",title:"'array01.cpp'"},'#include <iostream>\n#include <stdlib.h>\n#include <time.h>\n#include <cmath>\n#define ANZ 5\n\nusing namespace std;\n\nint main()\n{\nint z[ANZ], i;\nsrand(time(NULL));\n\nfor (i = 0; i < ANZ; i++)\n{\n  cout << "z[" << i << "] bitte: ";\n  cin >> z[i];\n}\ncout << "\\n---------------------\\n";\n/*\n    for(i=ANZ-1; i>=0; i--){\n        cout << "z["<< i <<"]: " << z[i] << endl;\n    }\n\n    cout << "Welches Element wollen Sie sehen? ";\n    cin >> i;\n*/\ni = rand() % ANZ;\ncout << "\\nz[" << i << "]: " << z[i];\n\nreturn 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"array02cpp"},"array02.cpp"),(0,i.kt)("p",null,"Array mit Zufallszahlen.\nEingabe einer Zahl und Anzeige dieses Array-Index."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='array02.cpp'",title:"'array02.cpp'"},'#include <iostream>\n#include <stdlib.h>\n#include <time.h>\n#include <cmath>\n#define ANZ 50\n\nusing namespace std;\n\nint main()\n{\nint z[ANZ], i;\nsrand(time(NULL));\n\nfor (i = 0; i < ANZ; i++)\n{\n  z[i] = rand() % 100 + 1;\n}\n\nfor (i = 0; i < ANZ; i++)\n{\n  cout << z[i] << " ";\n  if ((i + 1) % 10 == 0)\n    cout << endl;\n}\ncout << "\\n---------------------\\n";\ncout << "Welches Element wollen Sie sehen? ";\ncin >> i;\n\n//   i=rand()%ANZ;\ncout << "\\nz[" << i << "]: " << z[i];\n\nreturn 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"array02geradeungeradeanzahlcpp"},"array02GeradeUngeradeAnzahl.cpp"),(0,i.kt)("p",null,"Ermitteln Sie die Anzahl der geraden und ungeraden Zahlen..."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='array02GeradeUngeradeAnzahl.cpp'",title:"'array02GeradeUngeradeAnzahl.cpp'"},'#include <iostream>\n#include <stdlib.h>\n#include <time.h>\n#include <cmath>\n#define ANZ 50\n\nusing namespace std;\n\nint main()\n{\n  int z[ANZ], i;\n  int gerade = 0, ungerade = 0;\n  srand(time(NULL));\n\n  for (i = 0; i < ANZ; i++)\n  {\n    z[i] = rand() % 100 + 1;\n  }\n\n  for (i = 0; i < ANZ; i++)\n  {\n    cout << z[i] << " ";\n    if ((i + 1) % 10 == 0)\n      cout << endl;\n    if (z[i] % 2 == 0)\n    {\n      ungerade++;\n    }\n    else\n    {\n      gerade++;\n    }\n  }\n  cout << "\\n---------------------\\n";\n\n  cout << "Ungerade:  " << ungerade << endl;\n  cout << "Gerade:  " << gerade << endl;\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"array02minmaxcpp"},"array02MinMax.cpp"),(0,i.kt)("p",null,"  Ermitteln Sie Minumum und Maximum aus einem Array."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='array02MinMax.cpp'",title:"'array02MinMax.cpp'"},'#include <iostream>\n#include <stdlib.h>\n#include <time.h>\n#include <cmath>\n#define ANZ 50\n\nusing namespace std;\n\nint main()\n{\n  int min = 0;\n  int max = 0;\n  int z[ANZ], i;\n  srand(time(NULL));\n\n  for (i = 0; i < ANZ; i++)\n  {\n    z[i] = rand() % 100 + 1;\n  }\n\n  for (i = 0; i < ANZ; i++)\n  {\n    cout << z[i] << " ";\n    if ((i + 1) % 10 == 0)\n      cout << endl;\n    if (i == 0)\n    {\n      min = max = z[i];\n    }\n    else if (z[i] < min)\n    {\n      min = z[i];\n    }\n    else if (z[i] > max)\n    {\n      max = z[i];\n    }\n  }\n  cout << "\\n---------------------\\n";\n\n  cout << "min: " << min << endl;\n  cout << "max: " << max << endl;\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"0611"},"06.11")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"quadratzahlencpp"},"quadratzahlen.cpp"),(0,i.kt)("p",null,"  Ausgabe der Quadratzahlen:"),(0,i.kt)("p",null,"1 x 1 = 1"),(0,i.kt)("p",null,"2 x 2 = 4"),(0,i.kt)("p",null,"3 x 3 = 9"),(0,i.kt)("p",null,"..."),(0,i.kt)("p",null,"20 x 20 = 400"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='quadratzahlen.cpp'",title:"'quadratzahlen.cpp'"},'#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n  int a = 1, b = 0;\n\n  for (a = 1; a <= 20; a++)\n  {\n    b = a * a;\n    // cout << a << " x " << a << " = " << b << endl;\n    printf("%3i x %2i = %3x\\n", a, a, b);\n  }\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"zerlegencpp"},"zerlegen.cpp"),(0,i.kt)("p",null,"  Zerlegen Sie eine bis zu vierstellige Zahl (Eingabe)\nund geben Sie die Teile einzeln aus, "),(0,i.kt)("p",null,"z.B.: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"1234 = 1 Tausender + 2 Hunderter + 3 Zehner + 4 Einer"),(0,i.kt)("li",{parentName:"ul"},"689 = 6 Hunderter + 8 Zehner + 9 Einer"),(0,i.kt)("li",{parentName:"ul"},"7 = 7 Einer")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='zerlegen.cpp'",title:"'zerlegen.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n#include <cmath>\n\nusing namespace std;\n\nint main()\n{\n  int zahl = 0, t = 0, h = 0, z = 0;\n\n  cout << "Zahl bitte: (max. 9999)";\n  cin >> zahl;\n\n  t = zahl / 1000;\n  zahl = zahl % 1000;\n\n  h = zahl / 100;\n  zahl = zahl % 100;\n\n  z = zahl / 10;\n  zahl = zahl % 10;\n\n  if (t > 0)\n    cout << t << " Tausender + ";\n\n  cout << h << " Hunderter + ";\n  cout << z << " Zehner + ";\n  cout << zahl << " Einer";\n  cout << endl\n       << "Rest : " << zahl;\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"zerlegenpcpp"},"zerlegenP.cpp"),(0,i.kt)("p",null,"  Zerlegen Sie eine bis zu vierstellige Zahl (Eingabe)\nund geben Sie die Teile einzeln aus, "),(0,i.kt)("p",null,"z.B.: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"1234 = 1 Tausender + 2 Hunderter + 3 Zehner + 4 Einer"),(0,i.kt)("li",{parentName:"ul"},"689 = 6 Hunderter + 8 Zehner + 9 Einer"),(0,i.kt)("li",{parentName:"ul"},"7 = 7 Einer")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='zerlegenP.cpp'",title:"'zerlegenP.cpp'"},'#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n\n  int eingabe = 5432;\n\n  printf("%i x tausender \\n", eingabe / 1000);\n  printf("%i x hunderter \\n", eingabe % 1000 / 100);\n  printf("%i x zehner \\n", eingabe % 100 / 10);\n  printf("%i x einer \\n", eingabe % 10);\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"zerlegenzufallcpp"},"zerlegenZufall.cpp"),(0,i.kt)("p",null,"  Zerlegen Sie 10 zuf\xe4llige bis zu vierstellige Zahlen\nund geben Sie die Teile einzeln aus, "),(0,i.kt)("p",null,"z.B.: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"1234 = 1 Tausender + 2 Hunderter + 3 Zehner + 4 Einer"),(0,i.kt)("li",{parentName:"ul"},"689 = 6 Hunderter + 8 Zehner + 9 Einer"),(0,i.kt)("li",{parentName:"ul"},"7 = 7 Einer")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='zerlegenZufall.cpp'",title:"'zerlegenZufall.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n#include <cmath>\n\nusing namespace std;\n\nint main()\n{\n  int zahl, t = 0, h = 0, z = 0, i;\n  srand(time(NULL));\n\n  for (i = 1; i <= 10; i++)\n  {\n\n    zahl = rand() % 9999 + 1;\n    printf("Zahl: %4i => ", zahl);\n\n    t = zahl / 1000;\n    zahl = zahl % 1000;\n\n    h = zahl / 100;\n    zahl = zahl % 100;\n\n    z = zahl / 10;\n    zahl = zahl % 10;\n\n    if (t > 0)\n      cout << t << " Tausender + ";\n\n    cout << h << " Hunderter + ";\n    cout << z << " Zehner + ";\n    cout << zahl << " Einer\\n";\n  }\n\n  return 0;\n}\n\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"rechentrainer1cpp"},"rechenTrainer1.cpp"),(0,i.kt)("p",null,"  Rechentrainer mit Zufallszahlen"),(0,i.kt)("p",null,"Erweiterung1:\nOperatoren: ",(0,i.kt)("inlineCode",{parentName:"p"},"+")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='rechenTrainer1.cpp'",title:"'rechenTrainer1.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nusing namespace std;\n\nint main()\n{\n  int a, b, c, d;\n\n  srand(time(NULL));\n\n  a = rand() % 9 + 1;\n  b = rand() % 9 + 1;\n  c = a + b;\n\n  cout << a << " + " << b << " = ";\n  cin >> d;\n\n  if (d == c)\n    cout << "richtig geraten";\n  else\n    cout << "leider falsch";\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"rechentrainer2cpp"},"rechenTrainer2.cpp"),(0,i.kt)("p",null,"  Rechentrainer mit Zufallszahlen"),(0,i.kt)("p",null,"Erweiterung1:\nOperatoren: ",(0,i.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"-"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"%")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='rechenTrainer2.cpp'",title:"'rechenTrainer2.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nusing namespace std;\n\nint main()\n{\n  int a, b, c, eingabe, zuf;\n  char op;\n\n  srand(time(NULL));\n\n  a = rand() % 9 + 1;\n  b = rand() % 9 + 1;\n  zuf = rand() % 4;\n\n  switch (zuf)\n  {\n  case 0:\n    op = \'+\';\n    c = a + b;\n    break;\n  case 1:\n    op = \'-\';\n    c = a - b;\n    break;\n  case 2:\n  {\n    op = \'*\';\n    c = a * b;\n    break;\n  }\n  case 3:\n  {\n    op = \'%\';\n    c = a % b;\n    break;\n  }\n  }\n\n  cout << a << " " << op << " " << b << " = ";\n  cin >> eingabe;\n\n  if (eingabe == c)\n    cout << "richtig geraten";\n  else\n    cout << "leider falsch";\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"rechentrainer3cpp"},"rechenTrainer3.cpp"),(0,i.kt)("p",null,"  Rechentrainer mit Zufallszahlen"),(0,i.kt)("p",null,"Erweiterung1:\nOperatoren: ",(0,i.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"-"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"%")),(0,i.kt)("p",null,"Erweiterung2:\n10x Eingabe und Ausgabe und Summe der richtigen Berechnungen"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='rechenTrainer3.cpp'",title:"'rechenTrainer3.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nusing namespace std;\n\nint main()\n{\n  int a, b, c, eingabe, zuf, i, zaehler = 0;\n  char op;\n\n  srand(time(NULL));\n\n  for (i = 1; i <= 5; i++)\n  {\n    a = rand() % 9 + 1;\n    b = rand() % 9 + 1;\n    zuf = rand() % 4;\n\n    switch (zuf)\n    {\n    case 0:\n      op = \'+\';\n      c = a + b;\n      break;\n    case 1:\n      op = \'-\';\n      c = a - b;\n      break;\n    case 2:\n    {\n      op = \'*\';\n      c = a * b;\n      break;\n    }\n    case 3:\n    {\n      op = \'%\';\n      c = a % b;\n      break;\n    }\n    }\n\n    cout << a << " " << op << " " << b << " = ";\n    cin >> eingabe;\n\n    if (eingabe == c)\n      zaehler++;\n  }\n  cout << "Sie haben " << zaehler << " Aufgaben richtig beantwortet.";\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"rechentrainerpcpp"},"rechenTrainerP.cpp"),(0,i.kt)("p",null,"  Rechentrainer mit Zufallszahlen"),(0,i.kt)("p",null,"Erweiterung1:\nOperatoren: ",(0,i.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"-"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"%")),(0,i.kt)("p",null,"Erweiterung2:\n10x Eingabe und Ausgabe"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='rechenTrainer3.cpp'",title:"'rechenTrainer3.cpp'"},"#include <iostream>\n#define OG 20\n#define UG 10\n\nusing namespace std;\n\nint main()\n{\n  int a = 0, b = 0, c = 0, d = 0, operat = 0;\n  char op = ' ';\n\n  for (int i = 1; i <= 10; i++)\n  {\n    srand(time(NULL)); // Start Random\n    a = rand() % (OG - UG + 1) + UG;\n    b = rand() % (OG - UG + 1) + UG;\n    operat = rand() % 4;\n\n    if (operat == 0)\n    {\n      op = '+';\n      c = a + b;\n    }\n    else if (operat == 1)\n    {\n      op = '-';\n      c = a - b;\n    }\n    else if (operat == 2)\n    {\n      op = '*';\n      c = a * b;\n    }\n    else if (operat == 3)\n    {\n      op = '%';\n      c = a % b;\n    }\n\n    printf(\"Was ist das Ergebnis von %i %c %i?\\n\", a, op, b);\n    cin >> d;\n\n    while (d != c)\n    {\n      printf(\"Eingabe falsch! \\n\");\n      printf(\"Was ist das Ergebnis von %i %c %i?\\n\", a, op, b);\n      cin >> d;\n    }\n\n    printf(\"Gut gerechnet!\\n\");\n  }\n\n  return 0;\n}\n"))),(0,i.kt)("br",null),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"0711"},"07.11")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"arr01cpp"},"arr01.cpp"),(0,i.kt)("p",null,"Ermittlung und Ausgabe von Minimum und Maximum eines Arrays (Ganzzahlen)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='arr01.cpp'",title:"'arr01.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n#define ANZAHL 50\n\nusing namespace std;\n\nint main()\n{\n  int a[ANZAHL] = {0}, i, mini, maxi;\n  srand(time(NULL));\n\n  for (i = 0; i < ANZAHL; i++)\n  {\n    a[i] = rand() % 100 + 1;\n    cout << a[i] << " ";\n  }\n\n  mini = maxi = a[0];\n  for (i = 1; i < ANZAHL; i++)\n  {\n    if (a[i] > maxi)\n    {\n      maxi = a[i];\n    }\n    else if (a[i] < mini)\n    {\n      mini = a[i];\n    }\n  }\n  printf("\\nMinimum ist: %i", mini);\n  printf("\\nMaximum ist: %i", maxi);\n\n  return 0;\n}\n\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"arr02stringscpp"},"arr02strings.cpp"),(0,i.kt)("p",null,"  Eingabe, Speicherung und Ausgabe von 5 Strings in einem Array."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='arr02strings.cpp'",title:"'arr02strings.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n#include <cmath>\n\nusing namespace std;\n\nint main()\n{\n  string namen[5];\n  int i;\n\n  for (i = 0; i < 5; i++)\n  {\n    cout << "Name:";\n    cin >> namen[i];\n  }\n\n  cout << "\\n----------------------\\n";\n  for (i = 0; i < 5; i++)\n  {\n    cout << namen[i] << " ";\n  }\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"minmaxcpp-1"},"minMax.cpp"),(0,i.kt)("p",null,"  Es sollen vom User 100 Werte eingegeben werden, das Programm gibt Minimum\nund Maximum der eingegebenen Werte aus. Erstellen Sie den Code f\xfcr die geforderte Auswertung."),(0,i.kt)("p",null,"Hinweis: Es ist kein Array zu benutzen.\nFolgendes Ger\xfcst ist vorgegeben (und zu benutzen):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='vorgabe.cpp'",title:"'vorgabe.cpp'"},'#include <iostream>\nusing namespace std;\n\nint main()\n{\n  int x = 0, y = 0;\n  int mini = 0, maxi = 0;\n\n  while (y < 100)\n  {\n    cout << "\\nZahl bitte: ";\n    cin >> x;\n\n    y++;\n  }\n  cout << "\\nMinimum ist: " << mini;\n  cout << "\\nMaximum ist: " << maxi;\n\n  return 0;\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='minMax.cpp'",title:"'minMax.cpp'"},'#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n  int x = 0, y = 0;\n  int mini = 0, maxi = 0;\n\n// highlight-start\n  cout << "\\nZahl bitte: ";\n  cin >> mini >> maxi;\n  y++;\n// highlight-end\n\n  while (y < 100)\n  {\n    cout << "\\nZahl bitte: ";\n    cin >> x;\n\n// highlight-start\n    if (x < mini)\n    {\n      mini = x;\n    }\n    else if (x > maxi)\n    {\n      maxi = x;\n    }\n// highlight-end\n    y++;\n  }\n\n  cout << "\\nMinimum ist: " << mini;\n  cout << "\\nMaximum ist: " << maxi;\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"0811"},"08.11")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"arrwuerfelncpp"},"arrWuerfeln.cpp"),(0,i.kt)("p",null,'  Ein Programm soll 100/1000/10.000/... mal "w\xfcrfeln".'),(0,i.kt)("p",null,"Ermitteln Sie, wie oft jede Zahl (1-6) jeweils geworfen wurde."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='arrWuerfeln.cpp'",title:"'arrWuerfeln.cpp'"},'#include <iostream>\n#include <stdlib.h>\n#include <time.h>\n#define OG 6\n#define UG 1\n#define ANZAHL 60\n\nusing namespace std;\n\nint main()\n{\n  int i, zufall, z[7] = {0};\n\n  srand(time(NULL)); // Start Random\n\n  for (i = 1; i <= ANZAHL; i++)\n  {\n    zufall = rand() % (OG - UG + 1) + UG;\n    cout << zufall << " ";\n    if (i % 20 == 0)\n    {\n      cout << "\\n";\n    }\n    switch (zufall)\n    {\n    case 1:\n      z[1]++;\n      break;\n    case 2:\n      z[2]++;\n      break;\n    case 3:\n      z[3]++;\n      break;\n    case 4:\n      z[4]++;\n      break;\n    case 5:\n      z[5]++;\n      break;\n    case 6:\n      z[6]++;\n      break;\n    }\n  }\n\n  for (i = 1; i < 7; i++)\n  {\n    cout << "\\n " << i << ": " << z[i] << " mal";\n  }\n\n  return 0;\n}\n')),(0,i.kt)("p",null,"alternativ als array:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='arrWuerfeln2.cpp'",title:"'arrWuerfeln2.cpp'"},'#include <iostream>\n#include <stdlib.h>\n#include <time.h>\n#define OG 6\n#define UG 1\n#define ANZAHL 60\n\nusing namespace std;\n\nint main()\n{\n  int i, zufall, z[7] = {0};\n\n  srand(time(NULL)); // Start Random\n\n  for (i = 1; i <= ANZAHL; i++)\n  {\n    zufall = rand() % (OG - UG + 1) + UG;\n    cout << zufall << " ";\n    if (i % 20 == 0)\n    {\n      cout << "\\n";\n    }\n    z[zufall]++;\n  }\n\n  for (i = 1; i < 7; i++)\n  {\n    cout << "\\n " << i << ": " << z[i] << " mal";\n  }\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"volumencpp"},"volumen.cpp"),(0,i.kt)("p",null,"Berechnen. Sie das maximale Volumen eines quadratischen Beh\xe4ltnisses."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"alt",src:t(69443).Z,width:"600",height:"285"})),(0,i.kt)("p",null,"Die dunklen Fl\xe4chen werden in 1 mm Schritten vom Seitenrand ausgeschnitten. Im 1. Schritt werden\ndie Seitenfl\xe4chen jeweils um 1 mm verk\xfcrzt. Die so entstandene neue Grundfl\xe4che wird mit Imm\nH\xf6he berechnet, so erh\xe4lt man ein Volumen. Wiederholen Sie die Schritte, bis Sie das maximale\nVolumen haben und geben dann die so entstandenen neuen Seitenl\xe4ngen und das Volumen aus."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"alt",src:t(35655).Z,width:"1650",height:"571"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='volumen.cpp'",title:"'volumen.cpp'"},'#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n  double volumen = 0.0, a = 10.0, h = 0.0, aMax = 0.0, hMax = 0.0, volMax = 0.0;\n\n  while (h <= a / 2)\n  {\n    volumen = (a - 2 * h) * (a - 2 * h) * h;\n\n    if (volumen > volMax)\n    {\n      volMax = volumen;\n      aMax = a - 2 * h;\n      hMax = h;\n    }\n    h *= 10;\n    h += 1;\n    h /= 10;\n  }\n\n  cout << "Groesste Volumen ist " << volMax << endl;\n  cout << "Seitenlaenge :" << aMax << endl;\n  cout << "Hoehe :" << hMax << endl;\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"arraygeradeuebertragen"},"arrayGeradeUebertragen"),(0,i.kt)("p",null,"F\xfcllen Sie ein Array mit 10 Zufallszahlen (zwischen 10 und 50)\n\xfcbertragen Sie alle geraden Zahlen in das zweite Array."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='arrGeradeUebertragen.cpp'",title:"'arrGeradeUebertragen.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n#include <cmath>\n\nusing namespace std;\n\nint main()\n{\n  int arr[10], arrGerade[10] = {0}, i, k = 0;\n  srand(time(NULL));\n\n  for (i = 0; i < 10; i++)\n  {\n    arr[i] = rand() % (50 - 10 + 1) + 10;\n    cout << arr[i] << " ";\n  }\n  cout << endl;\n  for (i = 0; i < 10; i++)\n  {\n    if (arr[i] % 2 == 0)\n    {\n      arrGerade[k] = arr[i];\n      // cout << arrGerade[k] << " ";\n      k++;\n    }\n  }\n\n  for (i = 0; i < k; i++)\n  {\n    cout << arrGerade[i] << " ";\n  }\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"arrmultiplizierenuebertragencpp"},"arrMultiplizierenUebertragen.cpp"),(0,i.kt)("p",null,"F\xfcllen Sie ein Array mit 10 Zufallszahlen (zwischen 10 und 50)\nmultiplizieren Sie jede Zahl mit 2 und legen Sie das Ergebnis danach in einem\nzweiten Array ab"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='arrMultiplizierenUebertragen.cpp'",title:"'arrMultiplizierenUebertragen.cpp'"},'#include <iostream>\n#include <ctime>\n#define OG 50\n#define UG 10\n#define ANZAHL 10\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n  int erstes[ANZAHL] = {0}, zweites[ANZAHL] = {0}, i = 0;\n\n  srand(time(NULL));\n\n  for (i = 0; i < ANZAHL; i++)\n  {\n    erstes[i] = rand() % (OG - UG + 1) + UG;\n    zweites[i] = erstes[i] * 2;\n\n    cout << "Erstes[" << i << "]: " << erstes[i] << "   "\n         << "Zweites[" << i << "]: " << zweites[i] << endl;\n  }\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"0911"},"09.11")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"minimumsort"},"minimumSort"),(0,i.kt)("p",null,"Aufsteigende Sortierung eines Arrays nach Minimumsort / Methode des kleinsten Elementes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='minimumSort.cpp'",title:"'minimumSort.cpp'"},'#include <iostream>\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n  int arr[5] = {7, 12, 2, 15, 9}, i, hilf, k;\n\n  cout << "Vorher: ";\n  for (i = 0; i < 5; i++)\n  {\n    printf("%4i ", arr[i]);\n  }\n\n  for (i = 0; i < 4; i++)\n  {\n    for (k = 0; k < 5; k++)\n    {\n      hilf = arr[i];\n      arr[i] = arr[k];\n      arr[k] = hilf;\n    }\n  }\n\n  cout << "\\nNachher:";\n  for (i = 0; i < 5; i++)\n  {\n    printf("%4i ", arr[i]);\n  }\n\n  return 0;\n}\n')),(0,i.kt)("p",null,"alternativ mit Konstante f\xfcr Arraygr\xf6\xdfe:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='minimumSort2.cpp'",title:"'minimumSort2.cpp'"},'#include <iostream>\n// highlight-next-line\n#define ANZ 5\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n  int arr[ANZ] = {7, 12, 2, 15, 9}, i, hilf, k;\n\n  cout << "Vorher: ";\n  for (i = 0; i < ANZ; i++)\n  {\n    printf("%4i ", arr[i]);\n  }\n\n  for (i = 0; i < ANZ - 1; i++)\n  {\n    for (k = 0; k < 5; k++)\n    {\n      hilf = arr[i];\n      arr[i] = arr[k];\n      arr[k] = hilf;\n    }\n  }\n\n  cout << "\\nNachher:";\n  for (i = 0; i < ANZ; i++)\n  {\n    printf("%4i ", arr[i]);\n  }\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"minimumsortzufallcpp"},"minimumSortZufall.cpp"),(0,i.kt)("p",null,"Aufsteigende Sortierung eines Arrays nach Minimumsort / Methode des kleinsten Elementes."),(0,i.kt)("p",null,"Mit Zufallszahlen."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='minimumSortZufall.cpp'",title:"'minimumSortZufall.cpp'"},'#include <iostream>\n#include <ctime>\n#define ANZ 5\n#define OG 100\n#define UG 1\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n  int arr[ANZ], i, hilf, k;\n\n  srand(time(NULL));\n\n  for (i = 0; i < ANZ; i++)\n  {\n    arr[i] = rand() % (OG - UG - 1) + UG;\n  }\n\n  cout << "Vorher: ";\n  for (i = 0; i < ANZ; i++)\n  {\n    printf("%4i ", arr[i]);\n  }\n\n  for (i = 0; i < ANZ - 1; i++)\n  {\n    for (k = 0; k < 5; k++)\n    {\n      hilf = arr[i];\n      arr[i] = arr[k];\n      arr[k] = hilf;\n    }\n  }\n\n  cout << "\\nNachher:";\n  for (i = 0; i < ANZ; i++)\n  {\n    printf("%4i ", arr[i]);\n  }\n\n  return 0;\n}\n')),(0,i.kt)("p",null,"alternativ mit Angabe Schleifendurchl\xe4ufe und Tauschanzahl:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='minimumSortZufall2.cpp'",title:"'minimumSortZufall2.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n#define ANZ 20\n\nusing namespace std;\n\nint main()\n{\n  int arr[ANZ], hilf, tausch = 0, schleifen = 0;\n  int i, k;\n\n  srand(time(NULL));\n  cout << "Vorher:\\n";\n  for (i = 0; i < ANZ; i++)\n  {\n    arr[i] = i; // rand()%100+1;\n    cout << arr[i] << " ";\n  }\n\n  for (i = 0; i < ANZ - 1; i++)\n  {\n    for (k = i + 1; k < ANZ; k++)\n    {\n      schleifen++;\n      if (arr[k] < arr[i])\n      {\n        tausch++;\n        hilf = arr[i];\n        arr[i] = arr[k];\n        arr[k] = hilf;\n      }\n    }\n  }\n\n  cout << "\\nNachher:\\n";\n  for (i = 0; i < ANZ; i++)\n  {\n    cout << arr[i] << " ";\n  }\n\n  cout << "\\nEs wurde " << tausch << " mal getauscht.";\n  cout << "\\nSchleifendurchl\\204ufe: " << schleifen;\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"bubblesortcpp"},"bubbleSort.cpp"),(0,i.kt)("p",null,"  Aufsteigende Sortierung eines Arrays nach Methode Bubblesort."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='bubbleSort.cpp'",title:"'bubbleSort.cpp'"},'#include <iostream>\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n  int arr[5] = {25, 9, 14, 25, 7}, anz = 5, i = 0, hilf = 0;\n  bool tausch = true;\n\n  printf("Vorher: ");\n  for (i = 0; i < 5; i++)\n  {\n    printf("%3i ", arr[i]);\n  }\n\n  do\n  {\n    tausch = false;\n    anz = anz - 1;\n    for (i = 0; i < anz; i++)\n    {\n      if (arr[i] > arr[i + 1])\n      {\n        hilf = arr[i];\n        arr[i] = arr[i + 1];\n        arr[i + 1] = hilf;\n        tausch = true;\n      }\n    }\n\n  } while (tausch == true);\n\n  printf("\\nNachher:");\n  for (i = 0; i < 5; i++)\n  {\n    printf("%3i ", arr[i]);\n  }\n\n  return 0;\n}\n')),(0,i.kt)("p",null,"alternativ mit Angabe Schleifendurchl\xe4ufe und Tauschanzahl:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='bubbleSort2.cpp'",title:"'bubbleSort2.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n#define ANZ 10\n\nusing namespace std;\n\nint main()\n{\n  int arr[ANZ], hilf, tausch = 0, schleifen = 0;\n  int i, anz = ANZ;\n  bool getauscht;\n\n  srand(time(NULL));\n  cout << "Vorher:\\n";\n  for (i = 0; i < ANZ; i++)\n  {\n    arr[i] = rand() % 10 + 1;\n    cout << arr[i] << " ";\n  }\n\n  do\n  {\n    getauscht = false;\n    anz--;\n    for (i = 0; i < anz; i++)\n    {\n      schleifen++;\n      if (arr[i + 1] < arr[i])\n      {\n        tausch++;\n        hilf = arr[i];\n        arr[i] = arr[i + 1];\n        arr[i + 1] = hilf;\n        getauscht = true;\n      }\n    }\n  } while (getauscht == true);\n\n  cout << "\\nNachher:\\n";\n  for (i = 0; i < ANZ; i++)\n  {\n    cout << arr[i] << " ";\n  }\n\n  cout << "\\nEs wurde " << tausch << " mal getauscht.";\n  cout << "\\nSchleifendurchl\\204ufe: " << schleifen;\n\n  return 0;\n}\n')),(0,i.kt)("p",null,"Sortierung eines Text-Array:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='bubbleSortString.cpp'",title:"'bubbleSortString.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\n#define ANZ 5\n\nusing namespace std;\n\nint main()\n{\n  string arr[ANZ] = {"Hans", "Anton", "Stefanie", "Stefan", "Stef"}, hilf;\n  int i, anz = ANZ, tausch = 0, schleifen = 0;\n  bool getauscht;\n\n  srand(time(NULL));\n  cout << "Vorher:\\n";\n  for (i = 0; i < ANZ; i++)\n  {\n    cout << arr[i] << " ";\n  }\n\n  do\n  {\n    getauscht = false;\n    anz--;\n    for (i = 0; i < anz; i++)\n    {\n      schleifen++;\n      if (arr[i + 1] < arr[i])\n      {\n        tausch++;\n        hilf = arr[i];\n        arr[i] = arr[i + 1];\n        arr[i + 1] = hilf;\n        getauscht = true;\n      }\n    }\n  } while (getauscht == true);\n\n  cout << "\\nNachher:\\n";\n  for (i = 0; i < ANZ; i++)\n  {\n    cout << arr[i] << " ";\n  }\n\n  cout << "\\nEs wurde " << tausch << " mal getauscht.";\n  cout << "\\nSchleifendurchl\\204ufe: " << schleifen;\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"arraysearchcpp"},"arraySearch.cpp"),(0,i.kt)("p",null,"  Array nach Benutzereingabe durchsuchen."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='arraySearch.cpp'",title:"'arraySearch.cpp'"},'#include <iostream>\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\nstring arr[5] = {"Hans", "Stefan", "Stefanie", "Peter", "Paul"}, ein = " ";\nint i = 0;\n\nprintf("Bitte zu durchsuchenden Namen eingeben:");\ncin >> ein;\n\nfor (i = 0; i < 5; i++)\n{\n  if (ein == arr[i])\n  {\n    printf("%s gefunden: arr[%i]", ein.c_str(), i);\n  }\n}\nreturn 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"arraygewinnercpp"},"arrayGewinner.cpp"),(0,i.kt)("p",null,"  Zuf\xe4llig einen Gewinner aus dem Array ermitteln."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='arrayGewinner.cpp'",title:"'arrayGewinner.cpp'"},'#include <iostream>\n#include <ctime>\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n  string arr[5] = {"Hans", "Stefan", "Stefanie", "Peter", "Paul"};\n\n  srand(time(NULL));\n\n  printf("%s hat gewonnen", arr[rand() % 5].c_str());\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"1011"},"10.11")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"\xfcbungsklausur-3"},"\xdcbungsklausur 3"),(0,i.kt)("p",null,"Gegeben ist das untenstehende Array; erstellen Sie den C-Code\n(nur Variablendeklaration und Anweisungsteil) f\xfcr den Bubble-Sort zu diesem Array."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"int a[5] = { 2, 8, 5, 4, 21};")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='uebKlausur3.cpp'",title:"'uebKlausur3.cpp'"},'#include <iostream>\nusing namespace std;\n\nint main()\n{\n  // highlight-start\n  int a[5] = {2, 8, 5, 4, 21}, hilf = 0, i = 0, anz = 5;\n  bool tausch = true;\n  // highlight-end\n\n  cout << "vorher: ";\n  for (i = 0; i < 5; i++)\n  {\n    printf("%2i ", a[i]);\n  }\n\n// highlight-start\n  do\n  {\n    tausch = false;\n    anz--;\n    for (i = 0; i < anz; i++)\n    {\n      if (a[i] > a[i + 1])\n      {\n        hilf = a[i];\n        a[i] = a[i + 1];\n        a[i + 1] = hilf;\n        tausch = true;\n      }\n    }\n  } while (tausch);\n// highlight-end\n\n  cout << "\\nnachher:";\n  for (i = 0; i < 5; i++)\n  {\n    printf("%2i ", a[i]);\n  }\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"\xfcbungsklausur-4"},"\xdcbungsklausur 4"),(0,i.kt)("p",null,'  Erstellen Sie bitte ein komplettes C++-Programm "kw.cpp", das eine PS-Leistung\neingegeben bekommt und dann die entsprechenden Kilowattwert berechnet und aus\ngibt.'),(0,i.kt)("p",null,"Hilfe: 1 PS = 0,735499 kW"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='uebKlausur4.cpp'",title:"'uebKlausur4.cpp'"},'#include <iostream>\nusing namespace std;\n\nint main()\n{\n  float ps = 0, kw = 0;\n\n  cout << "Bitte PS eingeben:" << endl;\n  cin >> ps;\n\n  kw = ps * 0.735499;\n\n  cout << ps << " PS entsprechen " << kw << " kW" << endl;\n\n  return 0;\n}\n\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"\xfcbungsklausur-5"},"\xdcbungsklausur 5"),(0,i.kt)("p",null,"  Schreiben zu der, im folgenden Struktogramm dargestellten,\nProgrammlogik ein C++-Programm.\nNUR ab main() { ... }"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"alt",src:t(91002).Z,width:"280",height:"556"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='uebKlausur5.cpp'",title:"'uebKlausur5.cpp'"},'#include <iostream>\nusing namespace std;\n\nint main()\n{\n  int mini = 0, maxi = 0, z = 1, zahl = 0;\n\n  cout << "Zahl bitte eingeben:" << endl;\n  cin >> zahl >> maxi >> mini;\n\n// highlight-next-line\n  while (z <= 10)\n  {\n    cout << "Zahl bitte eingeben:" << endl;\n    cin >> zahl;\n\n    if (zahl > maxi)\n    {\n      maxi = zahl;\n    }\n    else if (zahl < mini)\n    {\n      mini = zahl;\n    }\n    z++;\n  }\n  cout << "Minimum ist :" << mini << endl;\n  cout << "Maximum ist :" << maxi << endl;\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"\xfcbungsklausur-6"},"\xdcbungsklausur 6"),(0,i.kt)("p",null,'Gegeben ist folgendes JavaScript. "\xdcbersetzen" Sie das Script in ein entsprechendes\nvollst\xe4ndiges C++-Programm.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html",metastring:"title='vorgabe.html'",title:"'vorgabe.html'"},'<html>\n  <head>\n    <title></title>\n    <meta name="author" content="kuhn" />\n  </head>\n  <body text="#000000" bgcolor="#FFFFFF" link="#FF0000">\n    <script language="JavaScript">\n      \x3c!--\n      var a = 10;\n      var s = 0;\n      var V = 0;\n      var Vmax = 0;\n      var Smax = 0;\n      var l = 0.1; // Schnittl\xe4nge\n      while (V >= Vmax) {\n        V = (a - 2 * s) * (a - 2 * s) * s;\n        // Zeile f\xfcr Zwischenausgabe der Werte\n        document.write("Schnittl\xe4nge ", s, " akt. Vol. ", V, ".<br>");\n        if (Vmax < V) {\n          Vmax = V;\n          Smax = s;\n        }\n        s = s + l;\n      }\n      document.write("Maximales Volumen von ", Vmax, " bei ", Smax);\n      //--\x3e\n    <\/script>\n  </body>\n</html>\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='uebKlausur6.cpp'",title:"'uebKlausur6.cpp'"},'#include <iostream>\nusing namespace std;\n\nint main()\n{\n  double a = 10, s = 0, v = 0, vmax = 0, smax = 0, l = 0.01;\n  while (v >= vmax)\n  {\n    v = (a - 2 * s) * (a - 2 * s) * s;\n    cout << "Schnittl\\204nge " << s << " akt. Volumen " << v << endl;\n    if (vmax < v)\n    {\n      vmax = v;\n      smax = s;\n    }\n    s += l;\n  }\n  cout << "Maximales Volumen von " << vmax << " bei " << smax;\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"\xfcbungsklausur-7"},"\xdcbungsklausur 7"),(0,i.kt)("p",null,"Gegeben ist ein Array bsp","[100]"," von Ganzzahlen.\n(Die unten gezeigten Inhalte stellen nur ein Beispiel zur besseren Visualisierung dar!)"),(0,i.kt)("p",null,"Erstellen Sie den C++-Code (nur Variablendeklaration und Anweisungsteil) f\xfcr die folgenden beiden Aufgabenstellungen:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"den Bubble-Sort zu dem Array bsp","[100]",";")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"alle ungeraden Zahlen aus bsp","[100]"," sind in das Array ung","[50]","\nzu \xfcbertragen. Ist das zweite Array voll (also alle Pl\xe4tze belegt),\ndarf nicht mehr weiter \xfcbertragen werden!"))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"int bsp [100] = {25, 3, 32, 8, 56, 4, 21, 12, 48, ... };")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"int ung [50] = {0};")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='uebKlausur7.cpp'",title:"'uebKlausur7.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\nusing namespace std;\n\nint main()\n{\n  int bsp[10] = {25, 3, 31, 8, 55, 43, 21, 17, 49, 85};\n  int ung[5] = {0};\n  int i = 0, k = 0, hilf, anz = 10;\n  bool tausch = true;\n\n  printf("\\nVorher:  ");\n  for (i = 0; i < 10; i++)\n  {\n    printf("%3i ", bsp[i]);\n  }\n\n  do\n  {\n    tausch = false;\n    anz = anz - 1;\n    for (i = 0; i < anz; i++)\n    {\n      if (bsp[i] > bsp[i + 1])\n      {\n        hilf = bsp[i];\n        bsp[i] = bsp[i + 1];\n        bsp[i + 1] = hilf;\n        tausch = true;\n      }\n    }\n\n  } while (tausch == true);\n\n  printf("\\nNachher: ");\n  for (i = 0; i < 10; i++)\n  {\n    printf("%3i ", bsp[i]);\n  }\n\n  // while(k<5 && i<10){\n  for (i = 0; i < 10 && k < 5; i++)\n  {\n    if (bsp[i] % 2 == 1)\n    {\n      ung[k] = bsp[i];\n      k++;\n    }\n    //  i++;\n  }\n\n  printf("\\nUngerade:");\n  for (i = 0; i < 5; i++)\n  {\n    printf("%3i", ung[i]);\n  }\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"1311"},"13.11")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"array2dzufallzahlencpp"},"array2DZufallZahlen.cpp"),(0,i.kt)("p",null,"  Mehrdimensionales Array mit Zufallszahlen zwischen 50 und 500."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='array2DZufallZahlen.cpp'",title:"'array2DZufallZahlen.cpp'"},'#include <iostream>\n#include <ctime>\n#define ZEILEN 10\n#define SPALTEN 5\n\nint main()\n{\n  int a[ZEILEN][SPALTEN] = {0};\n  srand(time(NULL));\n\n  for (int i = 0; i < ZEILEN; i++)\n  {\n    for (int k = 0; k < SPALTEN; k++)\n    {\n      a[i][k] = rand() % 451 + 50;\n      printf("%4i", a[i][k]);\n    }\n    printf("\\n");\n  }\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"arrayminmax"},"arrayMinMax"),(0,i.kt)("p",null,"Minimum und Maximum aus einem zweidimensionalen Array ausgeben."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='array2DMinMax.cpp'",title:"'array2DMinMax.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n#define ZEILEN 10\n#define SPALTEN 5\n\nusing namespace std;\n\nint main()\n{\n  int a[ZEILEN][SPALTEN] = {0}, i, k, mini = 0, maxi = 0;\n  srand(time(NULL));\n\n// highlight-start\n  a[i][k] = rand() % 451 + 50;\n  mini = maxi = a[i][k];\n  i++;\n  k++;\n// highlight-end\n\n  for (i = 0; i < ZEILEN; i++)\n  {\n    for (k = 0; k < SPALTEN; k++)\n    {\n      a[i][k] = rand() % 451 + 50;\n      printf("%4i", a[i][k]);\n\n// highlight-start\n      if (a[i][k] > maxi)\n      {\n        maxi = a[i][k];\n      }\n      else if (a[i][k] < mini)\n      {\n        mini = a[i][k];\n      }\n// highlight-end\n    }\n    cout << endl;\n  }\n\n  printf("\\nMinimum: %3i", mini);\n  printf("\\nMaximum: %3i", maxi);\n\n  return 0;\n}\n')),(0,i.kt)("p",null,"alternativ:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='array2DMinMax2.cpp'",title:"'array2DMinMax2.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n#define ZEILEN 10\n#define SPALTEN 5\n\nusing namespace std;\n\nint main()\n{\n  int a[ZEILEN][SPALTEN] = {0}, i, k, mini = 0, maxi = 0;\n  srand(time(NULL));\n\n  for (i = 0; i < ZEILEN; i++)\n  {\n    for (k = 0; k < SPALTEN; k++)\n    {\n      a[i][k] = rand() % 451 + 50;\n      printf("%4i", a[i][k]);\n    }\n    cout << endl;\n  }\n\n// highlight-start\n  mini = maxi = a[0][0];\n\n  for (i = 0; i < ZEILEN; i++)\n  {\n    for (k = 0; k < SPALTEN; k++)\n    {\n      if (a[i][k] > maxi)\n      {\n        maxi = a[i][k];\n      }\n      else if (a[i][k] < mini)\n      {\n        mini = a[i][k];\n      }\n    }\n  }\n// highlight-end\n\n  printf("\\nMinimum: %3i", mini);\n  printf("\\nMaximum: %3i", maxi);\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"array-systemhaus"},"Array Systemhaus"),(0,i.kt)("p",null,"In einem bundesweit agierenden Systemhaus mit angeschlossenem Shop f\xfcr Hard- und Software mit insgesamt 50 Filialen wird ein einheitliches Sortiment von 100 Produkten verkauft."),(0,i.kt)("p",null,"F\xfcr die monatlichen Umsatzauswertungen sollen die Daten in einem Programm ausgewertet werden, dazu wird ein zweidimensionales Array mit 100 Zeilen und 50 Spalten benutzt."),(0,i.kt)("p",null,"In jeder Zeile finden sich also die Ums\xe4tze eines Produkts in allen 50 Filialen; in jeder Spalte die Ums\xe4tze einer Filiale mit jeweils allen 100 Produkten."),(0,i.kt)("p",null,'Beispiel/Hinweis: Der Beispielwert 125,07 \u20ac ist der Umsatz des 2. Produktes in der 5. Filiale. Wegen der Indexierung aber mit 0 beginnend, also 0, 1, 2, \u2026, ist aber die Ansprache des dazugeh\xf6rigen Array-Elements dann "ums',"[1][4]",'".'),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"alt",src:t(59297).Z,width:"682",height:"349"})),(0,i.kt)("p",null,"Erstellen Sie die Programme (sprich: Struktogramme) f\xfcr die Ermittlung folgender Kennzahlen:"),(0,i.kt)("p",null,"a. Gesamtumsatz dieses Monats"),(0,i.kt)("p",null,'b. Welcher Umsatz in allen Filialen wurde mit dem neuen Betriebssystem "Winux 0.8.15" gemacht? (Produkt 10 = Zeile 9!)'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='arrUmsatz_a+b.cpp'",title:"'arrUmsatz_a+b.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nusing namespace std;\n\nint main()\n{\n  int ums[100][50], p, f, summe = 0;\n\n  for (p = 0; p < 100; p++)\n  {\n    for (f = 0; f < 50; f++)\n    {\n      ums[p][f] = 1; // rand()%151;\n      //        cout << ums[p][f] << " ";\n    }\n    cout << endl;\n  }\n  // Gesamtumsatz\n  for (p = 0; p < 100; p++)\n  {\n    for (f = 0; f < 50; f++)\n    {\n      summe += ums[p][f];\n    }\n  }\n  cout << "\\nMonatsumsatz: " << summe;\n\n  // Umsatz Produkt 10\n  summe = 0;\n  p = 9;\n  for (f = 0; f < 50; f++)\n  {\n    summe += ums[p][f];\n  }\n  cout << "\\nUmsatz Winux 08.15: " << summe;\n\n  // Umsatz Filiale 1 (Spalte 0)\n  summe = 0;\n  f = 0;\n  for (p = 0; p < 100; p++)\n  {\n    summe += ums[p][f];\n  }\n  cout << "\\nUmsatz Filiale 1: " << summe;\n\n  return 0;\n}\n')),(0,i.kt)("p",null,"c. Geben Sie den Umsatz je Produkt und den Umsatz je Filiale aus."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='arrUmsatz_c.cpp'",title:"'arrUmsatz_c.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nusing namespace std;\n\nint main()\n{\n  int ums[100][50], p, f, summe = 0;\n\n  for (p = 0; p < 100; p++)\n  {\n    for (f = 0; f < 50; f++)\n    {\n      ums[p][f] = 1; // rand()%151;\n    }\n    cout << endl;\n  }\n\n  // Umsatz je Produkt\n  for (p = 0; p < 100; p++)\n  {\n\n    for (f = 0; f < 50; f++)\n    {\n      summe += ums[p][f];\n    }\n    cout << "\\nProdukt: " << (p + 1) << " Umsatz: " << summe;\n    summe = 0;\n  }\n\n  // Umsatz Filiale 1 (Spalte 0)\n  for (f = 0; f < 50; f++)\n  {\n    summe = 0;\n    for (p = 0; p < 100; p++)\n    {\n      summe += ums[p][f];\n    }\n    cout << "\\nUmsatz Filiale: " << (f + 1) << " Umsatz: " << summe;\n  }\n\n  return 0;\n}\n')),(0,i.kt)("p",null,"d. MiniMax"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"(1) Das umsatzst\xe4rkste Produkt war welches? (Ausgabe Produktnummer und der dazugeh\xf6rige Umsatz)"),(0,i.kt)("li",{parentName:"ul"},'(2) Welches Produkt war der "Ladenh\xfcter", d.h. hatte den geringsten Umsatz? (insgesamt in allen Filialen, Ausgabe Produktnummer und der dazugeh\xf6rige Umsatz)')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='arrUmsatz_d.cpp'",title:"'arrUmsatz_d.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nusing namespace std;\n\nint main()\n{\n  int ums[100][50], p, f, summe = 0, maxi, mini, maxP, minP;\n  srand(time(NULL));\n  for (p = 0; p < 100; p++)\n  {\n    for (f = 0; f < 50; f++)\n    {\n      ums[p][f] = rand() % 11;\n    }\n  }\n\n  // Umsatz je Produkt (Zeilensumme = Spaltenindex in der inneren Schleife)\n  for (p = 0; p < 100; p++)\n  {\n    summe = 0;\n    for (f = 0; f < 50; f++)\n    {\n      summe += ums[p][f];\n    }\n    cout << "\\nProdukt: " << (p + 1) << " Umsatz: " << summe;\n    if (p == 0)\n    {\n      maxi = mini = summe;\n      maxP = minP = p;\n    }\n    else if (summe > maxi)\n    {\n      maxi = summe;\n      maxP = p;\n    }\n    else if (summe < mini)\n    {\n      mini = summe;\n      minP = p;\n    }\n  }\n  cout << "\\nBestes Produkt: " << (maxP + 1)\n       << " Umsatz: " << maxi;\n  cout << "\\nSchlechtestes Produkt: " << (minP + 1)\n       << " Umsatz: " << mini;\n\n  return 0;\n}\n')),(0,i.kt)("p",null,'e. Geben Sie die Filialen mit mehr als 10.000 \u20ac Umsatz aus und geben Sie am Ende die Anzahl dieser "Umsatzbringer" aus.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='arrUmsatz_e.cpp'",title:"'arrUmsatz_e.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nusing namespace std;\n\nint main()\n{\n  int ums[100][50], p, f, summe = 0, anz = 0;\n  srand(time(NULL));\n  for (p = 0; p < 100; p++)\n  {\n    for (f = 0; f < 50; f++)\n    {\n      ums[p][f] = rand() % 191;\n    }\n  }\n\n  // Umsatz je Filiale\n  for (f = 0; f < 50; f++)\n  {\n    summe = 0;\n    for (p = 0; p < 100; p++)\n    {\n      summe += ums[p][f];\n    }\n    // Umsatz > 10.000 ermitteln\n    if (summe > 10000)\n    {\n      cout << "\\nFiliale: " << (f + 1) << " Umsatz: " << summe;\n      anz++;\n    }\n  }\n  cout << "\\nEs sind " << anz << " Filialen.";\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"array-krankenhaus"},"Array Krankenhaus"),(0,i.kt)("p",null,'Das "Krankenhaus am Rande der Stadt" verf\xfcgt \xfcber unterschiedlich ausgestattete Zimmer:'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Pflegeklasse 1 Einzelzimmer mit eigener Nasszelle, TV und Internetanschluss inklusive"),(0,i.kt)("li",{parentName:"ul"},"Pflegeklasse 2 Zweibettzimmer mit eigener Nasszelle und TV; ein Internetanschluss ist auf Wunsch gegen Bezahlung m\xf6glich."),(0,i.kt)("li",{parentName:"ul"},"Pflegeklasse 3 Mehrbettzimmer mit Etagendusche/-WC, TV und Internetanschluss auf Wunsch gegen gesonderte Berechnung.")),(0,i.kt)("p",null,"In jeder Klasse werden monatlich die Patientenzahlen nach Geschlechtern getrennt erfasst, die Daten sind in einem zweidimensionalen Array gespeichert. Zur Veranschaulichung dient folgende schematische Darstellung der Daten"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"alt",src:t(56330).Z,width:"710",height:"235"})),(0,i.kt)("p",null,"Ermitteln Sie jetzt folgende Werte:"),(0,i.kt)("p",null,"a. Gesamtzahl aller m\xe4nnlichen Patienten im Jahr (Januar \u2013 Dezember), die Gesamtzahl aller weiblichen Patientinnen im Jahr und die Gesamtzahl aller Patienten f\xfcr das Jahr;"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='arrkrhs_a.cpp'",title:"'arrkrhs_a.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nusing namespace std;\n\nint main()\n{\n  int krhs[12][6], z, s, sm = 0, sw = 0;\n  srand(time(NULL));\n\n  printf("    I    II    III\\n");\n  printf("  m  w  m  w  m  w\\n");\n  for (z = 0; z < 12; z++)\n  {\n    for (s = 0; s < 6; s++)\n    {\n      krhs[z][s] = rand() % 3 + 1;\n      printf("%3i", krhs[z][s]);\n    }\n    printf("\\n");\n  }\n\n  for (z = 0; z < 12; z++)\n  {\n    for (s = 0; s < 6; s += 2)\n    {\n      sm += krhs[z][s];\n      sw += krhs[z][s + 1];\n    }\n  }\n\n  // for (z = 0; z < 12; z++)\n  // {\n  //   for (s = 0; s < 6; s++)\n  //   {\n  //     if (s % 2 == 0)\n  //       sm += krhs[z][s];\n  //     else\n  //       sw += krhs[z][s];\n  //   }\n  // }\n\n  // for (z = 0; z < 12; z++)\n  // {\n  //   for (s = 0; s < 6; s += 2)\n  //   {\n  //     sm += krhs[z][s];\n  //   }\n  //   for (s = 1; s < 6; s += 2)\n  //   {\n  //     sw += krhs[z][s];\n  //   }\n  // }\n\n  printf("\\nEs lagen %i M\\204nner im Krankenhaus.", sm);\n  printf("\\nEs lagen %i Frauen im Krankenhaus.", sw);\n  printf("\\nInsgesamt %i Menschen.", sm + sw);\n\n  return 0;\n}\n')),(0,i.kt)("p",null,"b. Geben Sie die Belegung je Monat aus; (also 12 Ausgaben)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='arrkrhs_b.cpp'",title:"'arrkrhs_b.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nusing namespace std;\n\nint main()\n{\n  int krhs[12][6], z, s, su = 0;\n  srand(time(NULL));\n\n  printf("    I    II    III\\n");\n  printf("  m  w  m  w  m  w\\n");\n  for (z = 0; z < 12; z++)\n  {\n    for (s = 0; s < 6; s++)\n    {\n      krhs[z][s] = rand() % 3 + 1;\n      printf("%3i", krhs[z][s]);\n    }\n    printf("\\n");\n  }\n\n  for (z = 0; z < 12; z++)\n  {\n    su = 0;\n    for (s = 0; s < 6; s++)\n    {\n      su += krhs[z][s];\n    }\n    printf("\\nMonat %2i, Belegung: %i", z + 1, su);\n  }\n\n  return 0;\n}\n')),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"1410"},"14.10")),(0,i.kt)("p",null,"c. Es wird eine Monatsnummer (1-12) eingegeben, das Programm gibt dann die Belegung (insgesamt) in diesem Monat aus; F\xfcr Fortgeschrittene: Es d\xfcrfen nur g\xfcltige Werte (1-12) eingegeben werden, auch wiederholte Falscheingaben sind abzufangen!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='arrkrhs_c.cpp'",title:"'arrkrhs_c.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nusing namespace std;\n\nint main()\n{\n  int krhs[12][6], z = 0, s, su = 0;\n  char antwort;\n\n  srand(time(NULL));\n\n  printf("    I    II    III\\n");\n  printf("  m  w  m  w  m  w\\n");\n  for (z = 0; z < 12; z++)\n  {\n    for (s = 0; s < 6; s++)\n    {\n      krhs[z][s] = rand() % 3 + 1;\n      printf("%3i", krhs[z][s]);\n    }\n    printf("\\n");\n  }\n\n  do\n  {\n    do\n    {\n      cout << "Gesuchter Monat? (1-12)";\n      cin >> z;\n    } while (z < 1 || z > 12);\n    su = 0;\n    for (s = 0; s < 6; s++)\n    {\n      su += krhs[z - 1][s];\n    }\n    printf("\\nMonat %2i, Belegung: %i", z, su);\n    printf("\\nNochmal? (j/n)");\n    cin >> antwort;\n  } while (antwort == \'j\' || antwort == \'J\');\n\n  return 0;\n}\n')),(0,i.kt)("p",null,"d. Belegung in Pflegeklasse II im ersten Halbjahr;"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='arrkrhs_d.cpp'",title:"'arrkrhs_d.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nusing namespace std;\n\nint main()\n{\n  int krhs[12][6], z, s, su = 0;\n  srand(time(NULL));\n\n  printf("    I    II    III\\n");\n  printf("  m  w  m  w  m  w\\n");\n  for (z = 0; z < 12; z++)\n  {\n    for (s = 0; s < 6; s++)\n    {\n      krhs[z][s] = rand() % 3 + 1;\n      printf("%3i", krhs[z][s]);\n    }\n    printf("\\n");\n  }\n\n  for (z = 0; z < 6; z++)\n  {\n    for (s = 2; s < 4; s++)\n    {\n      su += krhs[z][s];\n    }\n  }\n  //    s=2;\n  //    for(z=0;z<6;z++){\n  //        su=su+krhs[z][s]+krhs[z][s+1];\n  //        }\n\n  //    for(z=0;z<6;z++){\n  //        su=su+krhs[z][2]+krhs[z][3];\n  //        }\n\n  printf("\\nInsgesamt %i Menschen in Pflegeklasse II.", su);\n\n  return 0;\n}\n')),(0,i.kt)("p",null,"e. Anzahl m\xe4nnlicher Patienten im 2. Quartal;"),(0,i.kt)("p",null,"f. Anzahl weiblichen Patientinnen in Pflegeklasse I und II;"),(0,i.kt)("p",null,"g. Anzahl m\xe4nnlicher Patienten im November;"),(0,i.kt)("p",null,"h. In welcher Pflegeklasse lagen die meisten M\xe4nner?"),(0,i.kt)("p",null,"i. In welchem Monat lagen die meisten M\xe4nner im Krankenhaus? In welchem Monat lagen die wenigsten Frauen im Krankenhaus?"),(0,i.kt)("p",null,"j. Geben Sie die Anzahl der Patientinnen und Patienten (zusammen) pro Monat aus, nach Anzahl absteigend sortiert, damit abgelesen werden kann, in welchen Monaten statistisch gesehen mit verst\xe4rktem Patientenaufkommen zu rechnen ist.")),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"funktionen"},"Funktionen"),(0,i.kt)("p",null,"Funktionen quadrat() und kubik():"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Import der Funktionen vor main und Deklaration nach main()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='quadratUndKubik.cpp'",title:"'quadratUndKubik.cpp'"},'#include <iostream>\n\n// highlight-start\nint kubik(int);\nint quadrat(int);\n// highlight-end\n\n\nusing namespace std;\n\nint main()\n{\n\n  int a = 5, b;\n  b = quadrat(a);\n  cout << "Quadrat :" << b << endl;\n  b = kubik(a);\n  cout << "Kubik :" << b;\n\n  return 0;\n}\n\n// highlight-start\nint quadrat(int x)\n{\n  int erg;\n  erg = x * x;\n  return erg;\n}\n\nint kubik(int z)\n{\n  return quadrat(z) * z;\n}\n// highlight-end\n')),(0,i.kt)("p",null,"alternativ:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Deklaration vor main()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='quadratUndKubik2.cpp'",title:"'quadratUndKubik2.cpp'"},'#include <iostream>\n\n// highlight-start\nint kubik(int z)\n{\n  return quadrat(z) * z;\n}\n\nint quadrat(int x)\n{\n  int erg;\n  erg = x * x;\n  return erg;\n}\n// highlight-end\n\nusing namespace std;\n\nint main()\n{\n\n  int a = 5, b;\n  b = quadrat(a);\n  cout << "Quadrat :" << b << endl;\n  b = kubik(a);\n  cout << "Kubik :" << b;\n\n  return 0;\n}\n')),(0,i.kt)("p",null,"alternativ:"),(0,i.kt)(g,{mdxType:"CardDanger"},(0,i.kt)("p",null,"Caution: Deklaration "),(0,i.kt)("p",null,"Error: kubik() ruft quadrat() auf, quadrat wurde jedoch nach kubik deklariert!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='quadratUndKubikError.cpp'",title:"'quadratUndKubikError.cpp'"},'#include <iostream>\n\n// highlight-next-line-error\nint kubik(int z)\n// highlight-next-line-error\n{\n// highlight-next-line-error\n  return quadrat(z) * z;\n// highlight-next-line-error\n}\n\n// highlight-next-line-error\nint quadrat(int x)\n// highlight-next-line-error\n{\n// highlight-next-line-error\n  int erg;\n// highlight-next-line-error\n  erg = x * x;\n// highlight-next-line-error\n  return erg;\n// highlight-next-line-error\n}\n\nusing namespace std;\n\nint main()\n{\n\n  int a = 5, b;\n  b = quadrat(a);\n  cout << "Quadrat :" << b << endl;\n  b = kubik(a);\n  cout << "Kubik :" << b;\n\n  return 0;\n}\n\n')))),(0,i.kt)("br",null),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"1511"},"15.11")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"fktdefaultscpp"},"fktDefaults.cpp"),(0,i.kt)("p",null,"Funktion mit Aufruf eines zweiten optional Parameters (wird auf Defaultwert b=0 gesetzt)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='fktDefaults.cpp'",title:"'fktDefaults.cpp'"},'#include <iostream>\n\nfloat multiplizieren(float a, float b = 0)\n{\n  if (b == 0)\n    return a * a;\n  else\n    return a * b;\n}\n\nusing namespace std;\n\nint main()\n{\n  float erg;\n  erg = multiplizieren(1, 0);\n\n  //  erg=multiplizieren(6);\n\n  cout << "Ergebnis: " << erg;\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"fktueberladungcpp"},"fktUeberladung.cpp"),(0,i.kt)("p",null,"\xdcberladene Funktion"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='fktUeberladung.cpp'",title:"'fktUeberladung.cpp'"},'#include <iostream>\n\nfloat ui(float);        // Angabe mehrerer Prototypen\nfloat ui(float, float); // ="Funktions\xfcberladung"\n\nusing namespace std;\n\nint main()\n{\n  float f;\n\n  f = ui(2.5, 3.2);\n\n  cout << "Ergebnis: " << f;\n  return 0;\n}\n\nfloat ui(float a)\n{\n  return a * a;\n}\n\nfloat ui(float a, float b)\n{\n  return a / b;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"fktzinseszinscpp"},"fktZinseszins.cpp"),(0,i.kt)("p",null,"Es sollen vom Benutzer ein Anlagebetrag, ein Zinssatz (in %) und eine Stehzeit eingegeben werden.\nDas Programm gibt dann in einer Tabelle die Entwicklung des Kapitalzuwachses anschaulich in einer Tabelle aus.\n(Auf die Zahlenformatierung brauchen Sie noch nicht R\xfccksicht zu nehmen.)\nBeispiel: Kapital 1000 Euro, Zinssatz 3 % auf 5 Jahre angelegt"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Umsetzung der Konsoleneingaben und Ausgaben \xfcber eine Funktion")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='fktZinseszins.cpp'",title:"'fktZinseszins.cpp'"},'#include <iostream>\n\nusing namespace std;\n\nfloat eingabe(string text)\n{\n  float zahl;\n  cout << text << " eingeben: ";\n  cin >> zahl;\n  return zahl;\n}\ntropft\nint main()\n{\n  float kapital = 0.0, nkapital = 0.0, zinssatz = 0, zinsen = 0.0;\n  int jahre = 0, i;\n\n  kapital = eingabe("Kapital");\n  zinssatz = eingabe("Zinssatz");\n  jahre = eingabe("Stehzeit");\n\n  for (i = 1; i <= jahre; i++)\n  {\n    zinsen = kapital * zinssatz / 100;\n    nkapital = kapital + zinsen;\n\n    printf("%3i %8.2f %6.2f %8.2f\\n", i, kapital, zinsen, nkapital);\n    kapital = nkapital;\n  }\n\n  return 0;\n}\n')),(0,i.kt)("p",null,"Erweiterung der Funktion mit Schleifen, falls Werte nicht innerhalb vorgegebener Grenzen:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='fktZinseszins2.cpp'",title:"'fktZinseszins2.cpp'"},'#include <iostream>\n\nusing namespace std;\n\ndouble eingabe(string text, float unten, float oben)\n{\n  double zahl;\n\n  // highlight-start\n  do\n  {\n    cout << text << " eingeben(" << unten << "-" << oben << "): ";\n    cin >> zahl;\n  } while (zahl < unten || zahl > oben);\n  // highlight-end\n\n  return zahl;\n}\n\nint main()\n{\n  float kapital = 0.0, nkapital = 0.0, zinssatz = 0, zinsen = 0.0;\n  int jahre = 0, i;\n\n  kapital = eingabe("Kapital", 500, 500000);\n  zinssatz = eingabe("Zinssatz", 0.5, 10);\n  jahre = eingabe("Stehzeit", 1, 50);\n\n  for (i = 1; i <= jahre; i++)\n  {\n    zinsen = kapital * zinssatz / 100;\n    nkapital = kapital + zinsen;\n\n    printf("%3i %8.2f %6.2f %8.2f\\n", i, kapital, zinsen, nkapital);\n    kapital = nkapital;\n  }\n\n  return 0;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"rundenfktrundencpp"},"rundenfktRunden.cpp"),(0,i.kt)("p",null,"Funktion ",(0,i.kt)("inlineCode",{parentName:"p"},"runden(Zahl, Stellen)"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Stellen")," gibt die Anzahl der Stellen an auf die gerundet\nwerden soll."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='runden.cpp'",title:"'runden.cpp'"},"#include <iostream>\n#include <math.h>\n\nusing namespace std;\n\ndouble runden(double zahl, int stellen)\n{\n  zahl = zahl * pow(10, stellen);\n  zahl = round(zahl);\n  zahl = zahl / pow(10, stellen);\n  return zahl;\n}\n\nint main()\n{\n  float z = 5.88754;\n  cout << z << endl;\n  cout << runden(z, 4) << endl;\n\n  return 0;\n}\n"))),(0,i.kt)("br",null),(0,i.kt)(o,{mdxType:"CardHeading"},(0,i.kt)("h2",{id:"1611"},"16.11")),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"fktarrsortcpp"},"fktArrSort.cpp"),(0,i.kt)("p",null,"Bubblesort als Funktion"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='fktArrSort.cpp'",title:"'fktArrSort.cpp'"},"#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nvoid arrSort(int[], int);\n\nint main()\n{\n  int z[10], i, y;\n\n  srand(time(NULL));\n\n  printf(\"\\nVorher :\");\n  for (i = 0; i < 10; i++)\n  {\n    z[i] = rand() % 49;\n    printf(\"%i \", z[i]);\n  }\n\n  arrSort(z, 10); // Uebergabe der Anfangsadresse des (gesamten!) Arrays\n\n  printf(\"\\n\\nNachher:\");\n  for (i = 0; i < 10; i++)\n  {\n    printf(\"%i \", z[i]);\n  }\n  return 0;\n}\n\nvoid arrSort(int arr[], int i)\n{\n  int hilf, x;\n  char tausch = 'f';\n\n  do\n  {\n    tausch = 'f';\n    i--;\n    for (x = 0; x < i; x++)\n    {\n      if (arr[x] > arr[x + 1])\n      {\n        hilf = arr[x];\n        arr[x] = arr[x + 1];\n        arr[x + 1] = hilf;\n        tausch = 'w';\n      }\n    }\n  } while (tausch == 'w');\n}\n"))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"fktarrminmaxcpp"},"fktArrMinMax.cpp"),(0,i.kt)("p",null,"Minimum und Maximum aus einem Array \xfcber zwei Funktionen arrMin() und arrMax() bestimmen:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='fktArrMinMax.cpp'",title:"'fktArrMinMax.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nusing namespace std;\n\nint arrMin(int[], int);\nint arrMax(int[], int);\n\nint main()\n{\n  int z[10], i, mini, maxi;\n\n  srand(time(NULL));\n\n  for (i = 0; i < 10; i++)\n  {\n    z[i] = rand() % 49;\n    printf("%i ", z[i]);\n  }\n\n  mini = arrMin(z, 10);\n  maxi = arrMax(z, 10);\n\n  cout << "\\nMinimum ist: " << mini << endl;\n  cout << "Maximum ist: " << maxi << endl;\n\n  return 0;\n}\n\nint arrMin(int arr[], int x)\n{\n  int min;\n  min = arr[0];\n  for (int i = 1; i < x; i++)\n  {\n    if (arr[i] < min)\n    {\n      min = arr[i];\n    }\n  }\n\n  return min;\n}\n\nint arrMax(int arr[], int x)\n{\n  int max;\n  max = arr[0];\n  for (int i = 1; i < x; i++)\n  {\n    if (arr[i] > max)\n    {\n      max = arr[i];\n    }\n  }\n\n  return max;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"fktptrquadratcpp"},"fktPtrQuadrat.cpp"),(0,i.kt)("p",null,"Umfang und Fl\xe4che eines Quadrates bestimmen mit ",(0,i.kt)("inlineCode",{parentName:"p"},"Call by Reference"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='fktPtrQuadrat.cpp'",title:"'fktPtrQuadrat.cpp'"},'#include <iostream>\n\nusing namespace std;\nvoid quadrat(float, float *, float *);\n\nint main()\n{\n  float a, umf, fla;\n  cout << "Seite a: ";\n  cin >> a;\n\n  quadrat(a, &umf, &fla);\n\n  cout << "Umfang ist: " << umf << endl;\n  cout << "Fl\\204che ist: " << fla << endl;\n  return 0;\n}\n\nvoid quadrat(float a, float *u, float *f)\n{\n  *u = 4 * a;\n  *f = a * a;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"fktptrarrminmaxcpp"},"fktPtrArrMinMax.cpp"),(0,i.kt)("p",null,"Minimum und Maximum aus einem Array \xfcber eine Funktion und ",(0,i.kt)("inlineCode",{parentName:"p"},"Call by Reference")," bestimmen"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='fktPtrArrMinMax.cpp'",title:"'fktPtrArrMinMax.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nvoid arrMinMax(int[], int, int *, int *);\n\nint main()\n{\n  int z[10], i, mini, maxi;\n\n  srand(time(NULL));\n\n  printf("\\nVorher :");\n  for (i = 0; i < 10; i++)\n  {\n    z[i] = rand() % 100 + 1;\n    printf("%i ", z[i]);\n  }\n\n  arrMinMax(z, 10, &mini, &maxi);\n\n  printf("\\nMinimum: %i ", mini);\n  printf("\\nMaximum: %i ", maxi);\n  return 0;\n}\n\nvoid arrMinMax(int arr[], int anz, int *min, int *max)\n{\n  int i;\n  *min = *max = arr[0];\n  for (i = 0; i < anz; i++)\n  {\n    if (arr[i] < *min)\n    {\n      *min = arr[i];\n    }\n    else if (arr[i] > *max)\n    {\n      *max = arr[i];\n    }\n  }\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"fktptrtauschcpp"},"fktPtrTausch.cpp"),(0,i.kt)("p",null,"2 Zahlen mit einer Funktion und ",(0,i.kt)("inlineCode",{parentName:"p"},"Call by Reference")," tauschen."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='fktPtrTausch.cpp'",title:"'fktPtrTausch.cpp'"},'#include <iostream>\nusing namespace std;\n\nvoid tausch(int *, int *);\n\nint main()\n{\n  int a = 7, b = 25;\n  cout << "Vorher: " << a << " und " << b << endl;\n\n  tausch(&a, &b);\n  cout << "Nachher: " << a << " und " << b << endl;\n\n  return 0;\n}\n\nvoid tausch(int *a, int *b)\n{\n  int hilf = *a;\n  *a = *b;\n  *b = hilf;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"multi"},"multi()"),(0,i.kt)("p",null,'\xdcbergeben Sie 2 Variablen mit beliebigem Inhalt "Call by Reference" an eine Funktion ',(0,i.kt)("inlineCode",{parentName:"p"},"multi()"),"\nund berechnen Sie die Summe, die Differenz, das Produkt und den Quotienten dieser beiden Zahlen"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='fktPtrMulti.cpp'",title:"'fktPtrMulti.cpp'"},'#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nusing namespace std;\n\nvoid multi(double a, double b,\n           double *sum, double *dif, double *pro, double *quo)\n{\n  *sum = a + b;\n  *dif = a - b;\n  *pro = a * b;\n  *quo = a / b;\n}\n\nint main()\n{\n  double z1, z2, s, d, p, q;\n  cout << "Zahl 1: ";\n  cin >> z1;\n  cout << "Zahl 2: ";\n  cin >> z2;\n\n  multi(z1, z2, &s, &d, &p, &q);\n\n  cout << "\\nSumme   ist " << s;\n  cout << "\\nDifferenz ist " << d;\n  cout << "\\nProdukt ist " << p;\n  cout << "\\nQuotient ist " << q;\n  return 0;\n}\n')),(0,i.kt)("p",null,"alternativ:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='fktPtrMultiP.cpp'",title:"'fktPtrMultiP.cpp'"},'#include <iostream>\nusing namespace std;\n\nvoid multi(double, double, double *, double *, double *, double *);\n\nint main()\n{\n  double a = 4, b = 3, summe = 0, differenz = 0, produkt = 0, quotient = 0;\n  cout << "Vorher: " << a << " und " << b << endl;\n  cout << "Summe " << summe << " Differenz " << differenz << " Produkt " << produkt << " Quotient " << quotient << endl;\n\n  multi(a, b, &summe, &differenz, &produkt, &quotient);\n\n  cout << "Nachher: " << a << " und " << b << endl;\n  cout << "Summe " << summe << " Differenz " << differenz << " Produkt " << produkt << " Quotient " << quotient << endl;\n\n  return 0;\n}\n\nvoid multi(double a, double b, double *s, double *d, double *p, double *q)\n{\n  *s = a + b;\n  *d = a - b;\n  *p = a * b;\n  *q = a / b;\n}\n'))),(0,i.kt)("br",null),(0,i.kt)(h,{mdxType:"CardChapter"},(0,i.kt)("h3",{id:"die-phrasendreschmaschine"},"Die Phrasendreschmaschine"),(0,i.kt)("p",null,"F\xfcllen Sie drei Arrays mit jeweils den Satzteilen Subjekt, Pr\xe4dikat, Objekt."),(0,i.kt)("p",null,"Ein Programm kombiniert daraus \xfcber zuf\xe4llige Zugriffe auf die Arrays ganze S\xe4tze."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"arr01"),(0,i.kt)("th",{parentName:"tr",align:"center"},"arr02"),(0,i.kt)("th",{parentName:"tr",align:"center"},"arr03"),(0,i.kt)("th",{parentName:"tr",align:"center"},"arr04"),(0,i.kt)("th",{parentName:"tr",align:"center"},"arr05"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"Der Hund"),(0,i.kt)("td",{parentName:"tr",align:"center"},"bellt"),(0,i.kt)("td",{parentName:"tr",align:"center"},"laut."),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"optional")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"optional"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"Mia"),(0,i.kt)("td",{parentName:"tr",align:"center"},"tanzt"),(0,i.kt)("td",{parentName:"tr",align:"center"},"zauberhaft."),(0,i.kt)("td",{parentName:"tr",align:"center"},"Zeit"),(0,i.kt)("td",{parentName:"tr",align:"center"},"Ort")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"Der Regen"),(0,i.kt)("td",{parentName:"tr",align:"center"},"tropft"),(0,i.kt)("td",{parentName:"tr",align:"center"},"langsam."),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"center"})))),(0,i.kt)("p",null,"Ausgaben:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Hans tanzt langsam."),(0,i.kt)("li",{parentName:"ul"},"Der Regen singt zauberhaft."),(0,i.kt)("li",{parentName:"ul"},"Der Hund tropft laut.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:"title='phrasenDreschMaschine.cpp'",title:"'phrasenDreschMaschine.cpp'"},'#include <iostream>\n#include <ctime>\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n  string arr01[4] = {"Hans", "Der Hund", "Mia", "Der Regen"},\n         arr02[4] = {"singt", "bellt", "tanzt", "tropft"},\n         arr03[4] = {"falsch.", "laut.", "zauberhaft.", "langsam."};\n  int i, j, k;\n\n  srand(time(NULL));\n\n  for (int x = 0; x < 10; x++)\n  {\n    i = rand() % 4;\n    j = rand() % 4;\n    k = rand() % 4;\n\n    cout << arr01[i] << " " << arr02[j] << " " << arr03[k] << endl;\n  }\n\n  return 0;\n}\n'))),(0,i.kt)("br",null))}b.isMDXComponent=!0},56330:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/13.11-krankenhaus-0ab4b94422a39f137e282e7dadb9f285.png"},59297:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/13.11-systemhaus-1f1275ccc76ecac3107e9fc9330189f5.png"},40774:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/17.10-minMax-0d7a9d16f84d303a1638d039c8d7f937.png"},57420:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/18.10-minMax2-fe5a8365622d3fade135e42b2c13d0b1.png"},35655:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/18.11-volumen-22d5cda5fa34c44b59cbb9aa8fb66d80.png"},69443:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/18.11-volumen2-cca6d07d7f9ddf72ffd6d59d708c6eb2.png"},91002:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/uebKlausur5-3e425936f6f8c60effc5ff9038fa8881.png"}}]);