[
  {
    "designation": "array access first Element",
    "command": "const cars = [\"Saab\", \"Volvo\", \"BMW\"];\nlet car = cars[0];",
    "description": "",
    "url": "https://www.w3schools.com/js/js_arrays.asp"
  },
  {
    "designation": "array access last Element",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\r\nlet fruit = fruits[fruits.length - 1];",
    "description": "",
    "url": "https://www.w3schools.com/js/js_arrays.asp"
  },
  {
    "designation": "array add Element",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Apple\"];\r\nfruits.push(\"Lemon\"); ",
    "description": "-> last element",
    "url": "https://www.w3schools.com/js/js_arrays.asp"
  },
  {
    "designation": "array add Element",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\r\nfruits[fruits.length] = \"Kiwi\";",
    "description": "",
    "url": "https://www.w3schools.com/js/js_array_methods.asp"
  },
  {
    "designation": "array add Element push()",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\r\nfruits.push(\"Kiwi\");",
    "description": "",
    "url": "https://www.w3schools.com/js/js_array_methods.asp"
  },
  {
    "designation": "array add Element splice()",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\r\nfruits.splice(2, 2, \"Lemon\", \"Kiwi\");",
    "description": "[Banana,Orange,Lemon,Kiwi]",
    "url": "https://www.w3schools.com/js/js_array_methods.asp"
  },
  {
    "designation": "array add Element splice()",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\r\nfruits.splice(2, 0, \"Lemon\", \"Kiwi\");",
    "description": "[items to add] [items to remove]",
    "url": "https://www.w3schools.com/js/js_array_methods.asp"
  },
  {
    "designation": "array add first Elemenet unshift()",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\r\nfruits.unshift(\"Lemon\");",
    "description": "",
    "url": "https://www.w3schools.com/js/js_array_methods.asp"
  },
  {
    "designation": "array change Element",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Apple\"];\n// highlight-next-line-error\nfruits[6] = \"Lemon\";",
    "description": "⛔ Creates undefined \"holes\" in fruits",
    "url": "https://www.w3schools.com/js/js_arrays.asp"
  },
  {
    "designation": "array change Element",
    "command": "const cars = [\"Saab\", \"Volvo\", \"BMW\"];\r\ncars[0] = \"Opel\";",
    "description": "",
    "url": "https://www.w3schools.com/js/js_arrays.asp"
  },
  {
    "designation": "array compare function",
    "command": "function(a, b){return a - b}",
    "description": "-1= a before b, 1 = b before a",
    "url": "https://www.w3schools.com/js/js_array_sort.asp"
  },
  {
    "designation": "array compare function",
    "command": "const points = [40, 100, 1, 5, 25, 10];\r\ndocument.getElementById(\"demo\").innerHTML = points;\r\n\r\nfunction myFunction1() {\r\n  points.sort();\r\n  document.getElementById(\"demo\").innerHTML = points;\r\n}\r\n\r\nfunction myFunction2() {\r\n  points.sort(function(a, b){return a - b});\r\n  document.getElementById(\"demo\").innerHTML = points;\r\n}",
    "description": "",
    "url": "https://www.w3schools.com/js/js_array_sort.asp"
  },
  {
    "designation": "array concatenate concat()",
    "command": "const arr1 = [\"Cecilie\", \"Lone\"];\r\nconst arr2 = [\"Emil\", \"Tobias\", \"Linus\"];\r\nconst arr3 = [\"Robin\", \"Morgan\"];\r\nconst myChildren = arr1.concat(arr2, arr3);",
    "description": "returns new array",
    "url": "https://www.w3schools.com/js/js_array_methods.asp"
  },
  {
    "designation": "array concatenate concat()",
    "command": "const arr1 = [\"Emil\", \"Tobias\", \"Linus\"];\r\nconst myChildren = arr1.concat(\"Peter\"); ",
    "description": "returns new array",
    "url": "https://www.w3schools.com/js/js_array_methods.asp"
  },
  {
    "designation": "array concatenate spread Operator",
    "command": "const q1 = [\"Jan\", \"Feb\", \"Mar\"];\nconst q2 = [\"Apr\", \"May\", \"Jun\"];\nconst q3 = [\"Jul\", \"Aug\", \"Sep\"];\nconst q4 = [\"Oct\", \"Nov\", \"Dec\"];\n\nconst year = [...q1, ...q2, ...q3, ...q4]",
    "description": "",
    "url": "https://www.w3schools.com/js/js_array_iteration.asp"
  },
  {
    "designation": "array convert join()",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\r\ndocument.getElementById(\"demo\").innerHTML = fruits.join(\" * \");",
    "description": "Method, specify separator",
    "url": "https://www.w3schools.com/js/js_array_methods.asp"
  },
  {
    "designation": "array convert String",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\r\ndocument.getElementById(\"demo\").innerHTML = fruits;",
    "description": "equivalent fruits.toString()",
    "url": "https://www.w3schools.com/js/js_array_methods.asp"
  },
  {
    "designation": "array convert toString()",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\ndocument.getElementById(\"demo\").innerHTML = fruits.toString();",
    "description": "Method",
    "url": "https://www.w3schools.com/js/js_arrays.asp"
  },
  {
    "designation": "array create array from object",
    "command": "Array.from(\"ABCDEFG\");",
    "description": "",
    "url": "https://www.w3schools.com/js/js_array_iteration.asp"
  },
  {
    "designation": "array cut Elements slice()",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];\r\nconst citrus = fruits.slice(2);",
    "description": "[Lemon,Apple,Mango]",
    "url": "https://www.w3schools.com/js/js_array_methods.asp"
  },
  {
    "designation": "array cut Elements slice()",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];\r\nconst citrus = fruits.slice(1, 3);",
    "description": "[start] [end excluded] [Orange,Lemon]",
    "url": "https://www.w3schools.com/js/js_array_methods.asp"
  },
  {
    "designation": "array cut Elements slice()",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];\r\nconst citrus = fruits.slice(1);",
    "description": "creates new array",
    "url": "https://www.w3schools.com/js/js_array_methods.asp"
  },
  {
    "designation": "array declaration",
    "command": "const points = new Array(40, 100, 1, 5, 25, 10);",
    "description": "⛔ avoid use new Constructor",
    "url": "https://www.w3schools.com/js/js_arrays.asp"
  },
  {
    "designation": "array declaration",
    "command": "var cars = [\"Volvo\", \"BMW\"]; \n// highlight-next-line-error\nconst cars = [\"Volvo\", \"BMW\"];\n{\n  var cars = [\"Volvo\", \"BMW\"]; \n// highlight-next-line-error\n  const cars = [\"Volvo\", \"BMW\"];\n}",
    "description": "⛔ Reassignment const",
    "url": "https://www.w3schools.com/js/js_array_const.asp"
  },
  {
    "designation": "array declaration",
    "command": "const cars = [\"Volvo\", \"BMW\"];\n// highlight-next-line-error\nconst cars = [\"Volvo\", \"BMW\"];\n// highlight-next-line-error\nvar cars = [\"Volvo\", \"BMW\"];\n// highlight-next-line-error\ncars = [\"Volvo\", \"BMW\"]; \n\n{\n  const cars = [\"Volvo\", \"BMW\"];\n// highlight-next-line-error\n  const cars = [\"Volvo\", \"BMW\"];\n// highlight-next-line-error\n  var cars = [\"Volvo\", \"BMW\"];\n// highlight-next-line-error\n  cars = [\"Volvo\", \"BMW\"]; \n}",
    "description": "⛔ Reassignment const same Scope",
    "url": "https://www.w3schools.com/js/js_array_const.asp"
  },
  {
    "designation": "array declaration const",
    "command": "// highlight-next-line-error\nconst cars;\ncars = [\"Saab\", \"Volvo\", \"BMW\"];",
    "description": " ⛔ const arrays must be initialized",
    "url": "https://www.w3schools.com/js/js_array_const.asp"
  },
  {
    "designation": "array declaration const",
    "command": "const cars = [\"Volvo\", \"BMW\"]; \n{\n  const cars = [\"Volvo\", \"BMW\"]; \n}\n{\n  const cars = [\"Volvo\", \"BMW\"]; \n}",
    "description": "allowed = different Scope",
    "url": "https://www.w3schools.com/js/js_array_const.asp"
  },
  {
    "designation": "array declaration initialisation",
    "command": "const cars = [];\r\ncars[0]= \"Saab\";\r\ncars[1]= \"Volvo\";\r\ncars[2]= \"BMW\";",
    "description": "",
    "url": "https://www.w3schools.com/js/js_arrays.asp"
  },
  {
    "designation": "array declaration reassignment const",
    "command": "const cars = [\"Saab\", \"Volvo\", \"BMW\"];\n// highlight-next-line-error\ncars = [\"Toyota\", \"Volvo\", \"Audi\"];",
    "description": "⛔ Reassignment const",
    "url": "https://www.w3schools.com/js/js_array_const.asp"
  },
  {
    "designation": "array declaration reassignment var",
    "command": "var cars = [\"Volvo\", \"BMW\"]; \r\nvar cars = [\"Toyota\", \"BMW\"]; \r\ncars = [\"Volvo\", \"Saab\"]; ",
    "description": "allowed",
    "url": "https://www.w3schools.com/js/js_array_const.asp"
  },
  {
    "designation": "array declaration var",
    "command": "cars = [\"Saab\", \"Volvo\", \"BMW\"];\r\nvar cars;\r",
    "description": "note VAR",
    "url": "https://www.w3schools.com/js/js_array_const.asp"
  },
  {
    "designation": "array delete Element delete()",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\r\ndelete fruits[0];",
    "description": "⛔ undefined holes, use pop() / shift()",
    "url": "https://www.w3schools.com/js/js_array_methods.asp"
  },
  {
    "designation": "array delete first Elemenet shift()",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.shift();",
    "description": "",
    "url": "https://www.w3schools.com/js/js_array_methods.asp"
  },
  {
    "designation": "array delete last Elemenet pop()",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\r\nfruits.pop();",
    "description": "",
    "url": "https://www.w3schools.com/js/js_array_methods.asp"
  },
  {
    "designation": "array dimensionality flat()",
    "command": "const myArr = [[1,2],[3,4],[5,6]];\r\nconst newArr = myArr.flat();",
    "description": "",
    "url": "https://www.w3schools.com/js/js_array_methods.asp"
  },
  {
    "designation": "array filter every()",
    "command": "const numbers = [45, 4, 9, 16, 25];\r\nlet allOver18 = numbers.every(myFunction);\r\n\r\nfunction myFunction(value, index, array) {\r\n  return value > 18;\r\n}",
    "description": "",
    "url": "https://www.w3schools.com/js/js_array_iteration.asp"
  },
  {
    "designation": "array filter every()",
    "command": "const numbers = [45, 4, 9, 16, 25];\r\nlet allOver18 = numbers.every(myFunction);\r\n\r\nfunction myFunction(value) {\r\n  return value > 18;\r\n}",
    "description": "",
    "url": "https://www.w3schools.com/js/js_array_iteration.asp"
  },
  {
    "designation": "array filter find()",
    "command": "const numbers = [4, 9, 16, 25, 29];\r\nlet first = numbers.find(myFunction);\r\n\r\nfunction myFunction(value, index, array) {\r\n  return value > 18;\r\n}",
    "description": "returns only first occurrence",
    "url": "https://www.w3schools.com/js/js_array_iteration.asp"
  },
  {
    "designation": "array filter findIndex()",
    "command": "const numbers = [4, 9, 16, 25, 29];\r\nlet first = numbers.findIndex(myFunction);\r\n\r\nfunction myFunction(value, index, array) {\r\n  return value > 18;\r\n}",
    "description": "returns only first occurrence",
    "url": "https://www.w3schools.com/js/js_array_iteration.asp"
  },
  {
    "designation": "array filter includes()",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\r\n\r\nfruits.includes(\"Mango\"); // is true",
    "description": "including NaN",
    "url": "https://www.w3schools.com/js/js_array_iteration.asp"
  },
  {
    "designation": "array filter indexOf()",
    "command": "const fruits = [\"Apple\", \"Orange\", \"Apple\", \"Mango\"];\r\nlet position = fruits.indexOf(\"Apple\") + 1;",
    "description": "returns only first occurrence",
    "url": "https://www.w3schools.com/js/js_array_iteration.asp"
  },
  {
    "designation": "array filter lastIndexOf()",
    "command": "const fruits = [\"Apple\", \"Orange\", \"Apple\", \"Mango\"];\r\nlet position = fruits.lastIndexOf(\"Apple\") + 1;",
    "description": "returns only last occurrence",
    "url": "https://www.w3schools.com/js/js_array_iteration.asp"
  },
  {
    "designation": "array filter some()",
    "command": "const numbers = [45, 4, 9, 16, 25];\r\nlet someOver18 = numbers.some(myFunction);\r\n\r\nfunction myFunction(value, index, array) {\r\n  return value > 18;\r\n}",
    "description": "",
    "url": "https://www.w3schools.com/js/js_array_iteration.asp"
  },
  {
    "designation": "array filter()",
    "command": "const numbers = [45, 4, 9, 16, 25];\r\nconst over18 = numbers.filter(myFunction);\r\n\r\nfunction myFunction(value) {\r\n  return value > 18;\r\n}",
    "description": "",
    "url": "https://www.w3schools.com/js/js_array_iteration.asp"
  },
  {
    "designation": "array filter()",
    "command": "const numbers = [45, 4, 9, 16, 25];\r\nconst over18 = numbers.filter(myFunction);\r\n\r\nfunction myFunction(value, index, array) {\r\n  return value > 18;\r\n}",
    "description": "creates new array",
    "url": "https://www.w3schools.com/js/js_array_iteration.asp"
  },
  {
    "designation": "array find highest custom function",
    "command": "function myArrayMax(arr) {\r\n  let len = arr.length;\r\n  let max = -Infinity;\r\n  while (len--) {\r\n    if (arr[len] > max) {\r\n      max = arr[len];\r\n    }\r\n  }\r\n  return max;\r\n}",
    "description": "best practice",
    "url": "https://www.w3schools.com/js/js_array_sort.asp"
  },
  {
    "designation": "array find highest lowest Element asc",
    "command": "const points = [40, 100, 1, 5, 25, 10];\r\npoints.sort(function(a, b){return a - b});\r\n// now points[0] contains the lowest value\r\n// and points[points.length-1] contains the highest value",
    "description": "no existing built-in function",
    "url": "https://www.w3schools.com/js/js_array_sort.asp"
  },
  {
    "designation": "array find highest lowest Element desc",
    "command": "const points = [40, 100, 1, 5, 25, 10];\r\npoints.sort(function(a, b){return b - a});\r\n// now points[0] contains the highest value\r\n// and points[points.length-1] contains the lowest value",
    "description": "inefficient method",
    "url": "https://www.w3schools.com/js/js_array_sort.asp"
  },
  {
    "designation": "array find highest Math.max()",
    "command": "function myArrayMax(arr) {\n  return Math.max.apply(null, arr);\n}",
    "description": "equivalent Math.max(1, 2, 3)",
    "url": "https://www.w3schools.com/js/js_array_sort.asp"
  },
  {
    "designation": "array find lowest custom function",
    "command": "function myArrayMin(arr) {\r\n  let len = arr.length;\r\n  let min = Infinity;\r\n  while (len--) {\r\n    if (arr[len] < min) {\r\n      min = arr[len];\r\n    }\r\n  }\r\n  return min;\r\n}",
    "description": "best practice",
    "url": "https://www.w3schools.com/js/js_array_sort.asp"
  },
  {
    "designation": "array find lowest Math.min()",
    "command": "function myArrayMin(arr) {\n  return Math.min.apply(null, arr);\n}",
    "description": "equivalent Math.min(1, 2, 3)",
    "url": "https://www.w3schools.com/js/js_array_sort.asp"
  },
  {
    "designation": "array iterate",
    "command": "const cars = [\"Saab\", \"Volvo\", \"BMW\"];\r\ndocument.getElementById(\"demo\").innerHTML = cars;",
    "description": "",
    "url": "https://www.w3schools.com/js/js_arrays.asp"
  },
  {
    "designation": "array iterate entries()",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\r\nconst f = fruits.entries();\r\n\r\nfor (let x of f) {\r\n  document.getElementById(\"demo\").innerHTML += x;\r\n}",
    "description": "return key value pairs",
    "url": "https://www.w3schools.com/js/js_array_iteration.asp"
  },
  {
    "designation": "array iterate for()",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\r\nlet fLen = fruits.length;\r\n\r\nlet text = \"<ul>\";\r\nfor (let i = 0; i < fLen; i++) {\r\n  text += \"<li>\" + fruits[i] + \"</li>\";\r\n}\r\ntext += \"</ul>\";",
    "description": "",
    "url": "https://www.w3schools.com/js/js_arrays.asp"
  },
  {
    "designation": "array iterate forEach()",
    "command": "const numbers = [45, 4, 9, 16, 25];\r\nlet txt = \"\";\r\nnumbers.forEach(myFunction);\r\n\r\nfunction myFunction(value, index, array) {\r\n  txt += value + \"<br>\";\r\n}",
    "description": "callback function",
    "url": "https://www.w3schools.com/js/js_array_iteration.asp"
  },
  {
    "designation": "array iterate forEach()",
    "command": "const numbers = [45, 4, 9, 16, 25];\r\nlet txt = \"\";\r\nnumbers.forEach(myFunction);\r\n\r\nfunction myFunction(value) {\r\n  txt += value + \"<br>\";\r\n}",
    "description": "",
    "url": "https://www.w3schools.com/js/js_array_iteration.asp"
  },
  {
    "designation": "array iterate keys()",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\r\nconst keys = fruits.keys();\r\n\r\nfor (let x of keys) {\r\n  text += x + \"<br>\";\r\n}",
    "description": "returns index numbers",
    "url": "https://www.w3schools.com/js/js_array_iteration.asp"
  },
  {
    "designation": "array Property instanceof",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Apple\"];\r\n\r\nfruits instanceof Array;",
    "description": "returns true if created by given constructor",
    "url": "https://www.w3schools.com/js/js_arrays.asp"
  },
  {
    "designation": "array Property isArray()",
    "command": "Array.isArray(fruits);",
    "description": "",
    "url": "https://www.w3schools.com/js/js_arrays.asp"
  },
  {
    "designation": "array Property length",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet length = fruits.length;",
    "description": "",
    "url": "https://www.w3schools.com/js/js_arrays.asp"
  },
  {
    "designation": "array Property typeof",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Apple\"];\r\nlet type = typeof fruits;",
    "description": "⛔ returns: is object",
    "url": "https://www.w3schools.com/js/js_arrays.asp"
  },
  {
    "designation": "array run function dimension flatMap()",
    "command": "const myArr = [1, 2, 3, 4, 5, 6];\r\nconst newArr = myArr.flatMap((x) => x * 2);",
    "description": "",
    "url": "https://www.w3schools.com/js/js_array_iteration.asp"
  },
  {
    "designation": "array run function map()",
    "command": "const numbers1 = [45, 4, 9, 16, 25];\r\nconst numbers2 = numbers1.map(myFunction);\r\n\r\nfunction myFunction(value, index, array) {\r\n  return value * 2;\r\n}",
    "description": "creates new array",
    "url": "https://www.w3schools.com/js/js_array_iteration.asp"
  },
  {
    "designation": "array run function map()",
    "command": "const numbers1 = [45, 4, 9, 16, 25];\r\nconst numbers2 = numbers1.map(myFunction);\r\n\r\nfunction myFunction(value) {\r\n  return value * 2;\r\n}",
    "description": "no Execution for array without values",
    "url": "https://www.w3schools.com/js/js_array_iteration.asp"
  },
  {
    "designation": "array run function reduce()",
    "command": "const numbers = [45, 4, 9, 16, 25];\r\nlet sum = numbers.reduce(myFunction);\r\n\r\nfunction myFunction(total, value) {\r\n  return total + value;\r\n}",
    "description": "",
    "url": "https://www.w3schools.com/js/js_array_iteration.asp"
  },
  {
    "designation": "array run function reduce()",
    "command": "const numbers = [45, 4, 9, 16, 25];\r\nlet sum = numbers.reduce(myFunction);\r\n\r\nfunction myFunction(total, value, index, array) {\r\n  return total + value;\r\n}",
    "description": "returns single value, from [0] -> [end]",
    "url": "https://www.w3schools.com/js/js_array_iteration.asp"
  },
  {
    "designation": "array run function reduceRight()",
    "command": "const numbers = [45, 4, 9, 16, 25];\r\nlet sum = numbers.reduceRight(myFunction);\r\n\r\nfunction myFunction(total, value) {\r\n  return total + value;\r\n}",
    "description": "",
    "url": "https://www.w3schools.com/js/js_array_iteration.asp"
  },
  {
    "designation": "array run function reduceRight()",
    "command": "const numbers = [45, 4, 9, 16, 25];\r\nlet sum = numbers.reduceRight(myFunction);\r\n\r\nfunction myFunction(total, value, index, array) {\r\n  return total + value;\r\n}",
    "description": "returns single value, from  [end] -> [0]",
    "url": "https://www.w3schools.com/js/js_array_iteration.asp"
  },
  {
    "designation": "array scope",
    "command": "const cars = [\"Saab\", \"Volvo\", \"BMW\"];\r\n// Here cars[0] is \"Saab\"\r\n{\r\n  const cars = [\"Toyota\", \"Volvo\", \"BMW\"];\r\n  // Here cars[0] is \"Toyota\"\r\n}\r\n// Here cars[0] is \"Saab\"",
    "description": "const=blockScope, var=globalScope",
    "url": "https://www.w3schools.com/js/js_array_const.asp"
  },
  {
    "designation": "array sort asc sort()",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\r\nfruits.sort();",
    "description": "alphabetically ascending",
    "url": "https://www.w3schools.com/js/js_array_sort.asp"
  },
  {
    "designation": "array sort desc reverse()",
    "command": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.sort();\nfruits.reverse();",
    "description": "alphabetically descending",
    "url": "https://www.w3schools.com/js/js_array_sort.asp"
  },
  {
    "designation": "array sort numeric asc",
    "command": "const points = [40, 100, 1, 5, 25, 10];\r\npoints.sort(function(a, b){return a - b});",
    "description": "sort() produces incorrect result",
    "url": "https://www.w3schools.com/js/js_array_sort.asp"
  },
  {
    "designation": "array sort numeric desc",
    "command": "const points = [40, 100, 1, 5, 25, 10];\r\npoints.sort(function(a, b){return b - a});",
    "description": "sort() produces incorrect result",
    "url": "https://www.w3schools.com/js/js_array_sort.asp"
  },
  {
    "designation": "array sort random order function",
    "command": "const points = [40, 100, 1, 5, 25, 10];\r\n\r\nfor (let i = points.length -1; i > 0; i--) {\r\n  let j = Math.floor(Math.random() * (i+1));\r\n  let k = points[i];\r\n  points[i] = points[j];\r\n  points[j] = k;\r\n}",
    "description": "Fisher Yates Method",
    "url": "https://www.w3schools.com/js/js_array_sort.asp"
  },
  {
    "designation": "array sort random order function",
    "command": "const points = [40, 100, 1, 5, 25, 10];\r\npoints.sort(function(){return 0.5 - Math.random()});",
    "description": "not accurate",
    "url": "https://www.w3schools.com/js/js_array_sort.asp"
  },
  {
    "designation": "array sorting object function",
    "command": "const cars = [\n  {type:\"Volvo\", year:2016},\n  {type:\"Saab\", year:2001},\n  {type:\"BMW\", year:2010}\n];\ncars.sort(function(a, b){\r\n  let x = a.type.toLowerCase();\r\n  let y = b.type.toLowerCase();\r\n  if (x < y) {return -1;}\r\n  if (x > y) {return 1;}\r\n  return 0;\r\n});",
    "description": "",
    "url": "https://www.w3schools.com/js/js_array_sort.asp"
  }
]
